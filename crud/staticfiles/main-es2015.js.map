{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/Guards/GestionGeneralGuard/gestion-general-guard.guard.ts","./src/app/Guards/GestionGuard/gestion-guard.guard.ts","./src/app/Guards/VisualizadorGuard/visualizador-guard.guard.ts","./src/app/Modelos/ConexionBackend.ts","./src/app/Modelos/CrearUsuarioParaEdicion.ts","./src/app/Modelos/Estudiante.ts","./src/app/Modelos/PaginadorEspanish.ts","./src/app/Modelos/Permiso.ts","./src/app/Modelos/Usuario.ts","./src/app/Modelos/UsuarioAutenticado.ts","./src/app/Modelos/UsuarioEstandar.ts","./src/app/Modelos/ValidadoresCampos.ts","./src/app/Modelos/ValidarCampoUsuario.ts","./src/app/Servicios/Autenticacion/autenticacion.service.ts","./src/app/Servicios/EditarEstudiante/editar-estudiante.service.ts","./src/app/Servicios/EditarUsuario/editar-usuario.service.ts","./src/app/Servicios/EliminarEstudiante/eliminar-estudiante.service.ts","./src/app/Servicios/EliminarUsuario/eliminar-usuario.service.ts","./src/app/Servicios/InsertarEstudiante/insertar-estudiante.service.ts","./src/app/Servicios/InsertarUsuario/insertar-usuario.service.ts","./src/app/Servicios/MostrarEstudiantes/mostrar-estudiantes.service.ts","./src/app/Servicios/MostrarUsuarios/mostrar-usuarios.service.ts","./src/app/Servicios/NavbarPrincipalInterface/navbar-principal-interface.service.ts","./src/app/Servicios/ObtenerEstudiante/obtener-estudiante.service.ts","./src/app/Servicios/ObtenerUsuario/obtener-usuario.service.ts","./src/app/Servicios/PaginadorTraductor/paginador-traductor.service.ts","./src/app/Servicios/Permisos/obtener-permisos.service.ts","./src/app/Servicios/ProveedorCredenciales/proveedor-credenciales.service.ts","./src/app/Servicios/SalirSesion/salir-sesion.service.ts","./src/app/Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service.ts","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/autenticacion/autenticacion.component.ts","./src/app/autenticacion/autenticacion.component.html","./src/app/estudiante/crear-estudiante/crear-estudiante.component.ts","./src/app/estudiante/crear-estudiante/crear-estudiante.component.html","./src/app/estudiante/editar-estudiante/editar-estudiante.component.ts","./src/app/estudiante/editar-estudiante/editar-estudiante.component.html","./src/app/estudiante/mostrar-estudiantes/mostrar-estudiantes.component.ts","./src/app/estudiante/mostrar-estudiantes/mostrar-estudiantes.component.html","./src/app/nav-bar/nav-bar.component.ts","./src/app/nav-bar/nav-bar.component.html","./src/app/pagina-principal/pagina-principal.component.ts","./src/app/pagina-principal/pagina-principal.component.html","./src/app/usuario/editar-usuario/editar-usuario.component.ts","./src/app/usuario/editar-usuario/editar-usuario.component.html","./src/app/usuario/insertar-usuario/insertar-usuario.component.ts","./src/app/usuario/insertar-usuario/insertar-usuario.component.html","./src/app/usuario/mostrar-usuarios/mostrar-usuarios.component.ts","./src/app/usuario/mostrar-usuarios/mostrar-usuarios.component.html","./src/app/usuario/mostrar-usuarios/mostrar-usuarios.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// La siguiente clase permitira el acceso a rutas a los usuario autenticados como Gestion General\n\nexport class GestionGeneralGuardGuard implements CanActivate {\n\n  /* \n  En es siguiente metodo se inyecta el servicio UsuarioAutenticadoOperacionesService, el cual tiene acceso al usuario au-\n  tenticado\n  */\n\n  constructor(private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService){\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const estaUsuarioAutenticado = this.usuarioAutenticadoOperacionesServ.hayUsuarioAutenticado();\n    if (!estaUsuarioAutenticado) {\n      return false;\n    }\n    const esGestorGeneral = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().esGestorGeneral();\n    return esGestorGeneral;\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// La siguiente clase permitira el acceso a rutas a los usuario autenticados como Gestion o Gestion General \n\n\nexport class GestionGuardGuard implements CanActivate {\n\n  /* \n  En es siguiente metodo se inyecta el servicio UsuarioAutenticadoOperacionesService, el cual tiene acceso al usuario au-\n  tenticado\n  */\n\n  constructor(private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService){\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const estaUsuarioAutenticado = this.usuarioAutenticadoOperacionesServ.hayUsuarioAutenticado();\n    if (!estaUsuarioAutenticado) {\n      return false;\n    }\n    const esGestion = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().esGestor();\n    const esGestorGeneral = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().esGestorGeneral();\n\n    return esGestion || esGestorGeneral;\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// La siguiente clase permitira el acceso a rutas a los usuario autenticados como Gestion General, Gestor o Visualizador\n\nexport class VisualizadorGuardGuard implements CanActivate {\n\n  /* \n  En es siguiente metodo se inyecta el servicio UsuarioAutenticadoOperacionesService, el cual tiene acceso al usuario au-\n  tenticado\n  */\n\n  constructor(private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService){\n\n  }\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n      const estaUsuarioAutenticado = this.usuarioAutenticadoOperacionesServ.hayUsuarioAutenticado();\n      if (!estaUsuarioAutenticado) {\n        return false;\n      }\n      const esGestorGeneral = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().esGestorGeneral();\n      const esGestion = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().esGestor();\n      const esVisualizador = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().esVisualizador();\n\n      return esGestorGeneral || esGestion || esVisualizador;\n  }\n  \n}\n","//export const URL = 'http://localhost:8000/';\r\n//export const URL = 'http://www.crud.com/';\r\n//export const URL = 'http://192.168.1.103/';\r\n//export const URL = 'http://127.0.0.1/';\r\n//export const URL = 'http://192.168.1.104/';\r\nexport const URL = 'http://albert10.pythonanywhere.com/';\r\n\r\n//ng build --deploy-url /static/\r\n","import { Permiso } from \"./Permiso\";\r\n\r\n// La siguiente clase permite dar formato a un usuario para ser mostrado en un formulario de edicion\r\n\r\nexport class CrearUsuarioParaEdicion {\r\n    usuario: any;\r\n    permisos: Permiso[];\r\n    \r\n    constructor(usuario, permisos: Permiso[]) {\r\n        this.usuario = usuario;\r\n        this.permisos = permisos;\r\n    }\r\n\r\n    // Este metodo retorna un usuario con el formato necesario para ser mostrado en un formulario de edicion\r\n\r\n    getUsuarioParaEdicion(){\r\n        let permiso = this.getPermiso();\r\n        let user=  {pk: this.usuario.pk, username: this.usuario.username, user_permissions: [{pk: permiso.pk, name: permiso.name}]};\r\n        return user;\r\n    }\r\n\r\n    \r\n    // El siguiente metodo retorna el permiso perteneciente al atributo usuario de esta clase    \r\n\r\n    getPermiso(){\r\n        let permiso: Permiso;\r\n        for (let index = 0; index < this.permisos.length; index++) {          \r\n            if(this.permisos[index].pk === this.usuario.user_permissions[0]){\r\n                permiso = this.permisos[index];\r\n                break;\r\n            }            \r\n        }        \r\n        return permiso;\r\n    }\r\n}","// La siguiente clase permitira almacenara los datos de un estudiante\r\n\r\nexport class Estudiante {\r\n    id;\r\n    nombre: string;\r\n    apellidos: string;\r\n    numeroIdentidad: string;\r\n    nota: number;\r\n    numeroTelefono: string;\r\n\r\n    constructor(estudiante) {\r\n        this.id = estudiante.id;\r\n        this.nombre = estudiante.nombre;\r\n        this.apellidos = estudiante.apellidos;\r\n        this.numeroIdentidad = estudiante.numeroIdentidad;\r\n        this.nota = estudiante.nota;\r\n        this.numeroTelefono = estudiante.numeroTelefono;\r\n    }\r\n\r\n}\r\n","import { MatPaginatorIntl } from '@angular/material/paginator';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\n\r\n// La siguiente clase permitira cambiar etiquetas del paginador a espanol: 'of' => 'de'\r\n\r\nexport class CustomMatPaginatorIntl extends MatPaginatorIntl {\r\n    constructor() {\r\n        super();\r\n    }    \r\n\r\n    /*\r\n    El siguiente metodo recibe como argumento el indice de la pagina seleccionada, la cantidad de estudiantes a mostrar\r\n    por pagina y la cantidad total de estudiantes. El metodo retorna una cadena que contiene el numero del primer y ul-\r\n    timo estudiante de la pagina y el total de estudiantes.\r\n    */\r\n\r\n    getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n        if ( length === 0 || pageSize === 0) {\r\n            return `0 de ${length}`;\r\n        }\r\n\r\n        length = Math.max(length, 0);\r\n        const startIndex = page * pageSize;\r\n        const endIndex = Math.min(startIndex + pageSize, length);\r\n        return `${startIndex + 1} - ${endIndex} de ${length}`;\r\n    }\r\n\r\n}\r\n","// La siguiente clase representa un Permiso\r\n\r\nexport class Permiso {\r\n    pk: number;\r\n    name: string;\r\n\r\n    constructor(pk: number, name: string){\r\n        this.pk = pk;\r\n        this.name = name;\r\n    }\r\n}","// La siguiente clase permitira almacenara los datos de un permiso de usuario\r\n\r\nclass Permiso {\r\n    pk: string;\r\n    name: string;\r\n\r\n    constructor(pk: string, name: string) {\r\n        this.pk = pk;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\n// La siguiente clase permitira almacenara los datos de un usuario\r\n\r\nexport class Usuario {\r\n    pk: number;\r\n    username: string;\r\n    permiso: Permiso;\r\n\r\n// El siguiente constructor recibe un usuario en el formato entregado por el backend y crea un Usuario\r\n\r\n    constructor(usuario) {        \r\n        this.pk = usuario.pk;\r\n        this.username = usuario.username;\r\n        this.permiso = new Permiso(usuario.user_permissions[0].pk, usuario.user_permissions[0].name)\r\n    }\r\n\r\n}","// La siguiente clase permite almacenar las credenciales de usuario\r\n\r\nexport class UsuarioAutenticado{\r\n\r\n    username: string;\r\n    permiso: string;\r\n    token: string;\r\n\r\n    // El constructor recibe como argumento un objeto con las credenciales del usuario, enviadas desde el backend\r\n\r\n    constructor(usuarioBackend){\r\n        this.username = usuarioBackend.username;\r\n        this.permiso = usuarioBackend.permiso;\r\n        this.token = usuarioBackend.token;\r\n    }\r\n\r\n    getUsername():string{\r\n        return this.username;\r\n    }\r\n\r\n    esGestor():boolean{\r\n        return this.permiso === 'Gestion';\r\n    }\r\n\r\n    esGestorGeneral():boolean{\r\n        return this.permiso === 'Gestion General';\r\n    }\r\n\r\n    esVisualizador():boolean{\r\n        return this.permiso === 'Visualizador';\r\n    }\r\n\r\n    getToken():string{\r\n        return this.token;\r\n    }\r\n}","import { Permiso } from './Permiso';\r\n\r\n// La siguiente clase permite crear un objeto que represente la forma en que el backend representa los usuario\r\n\r\nexport class UsuarioEstandar {\r\n\r\n    permisos: Permiso[];\r\n    usuario: any;\r\n\r\n    constructor(permisos: Permiso[], usuario: any) {\r\n        this.permisos = permisos;\r\n        this.usuario = usuario;\r\n    }\r\n\r\n    // El siguiente metodo permite obtener el pk del permiso cuyo name sea igual al del atributo nombrePermiso\r\n\r\n    getId(): number{\r\n        for (let index = 0; index < this.permisos.length; index++) {\r\n            if(this.permisos[index].name === this.usuario.permiso){\r\n                return this.permisos[index].pk;\r\n            }            \r\n        }\r\n    }\r\n\r\n    /*\r\n    En el siguiente metodo al atributo usuario, se le coloca el atributo user_permissions, el cual esta en el formato del\r\n    user del backend. Luego se retorna una copia de usuario\r\n    */\r\n\r\n    getUsuario(){          \r\n        this.usuario.user_permissions = [this.getId()];\r\n        delete this.usuario.permiso;\r\n        return Object.assign({}, this.usuario);\r\n    }\r\n}","import { FormControl } from '@angular/forms';\r\n\r\n// La siguiente clase permite validar los campos de un formulario de estudiantes\r\n\r\nexport class ValidadoresCampos {\r\n\r\n    /*\r\n    La siguiente funcion retorna permite validar que un numero de identidad sea correcto. El metodo recibe como argumento\r\n    el campo de texto para insertar numero de identidad\r\n    */\r\n\r\n    validarNumeroIdentidad = (control: FormControl): {[s: string]: boolean} => {\r\n        if (!control.value.match(/^\\d{11}$/)) {\r\n            return {numeroIdentidadInvalido: true};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*\r\n    La siguiente funcion permite validar que un numero de telefono sea correcto. El metodo recibe como argumento el campo\r\n    de texto para insertar numero de telefono\r\n    */\r\n\r\n    validarNumeroTelefono = (control: FormControl): {[s: string]: boolean} => {\r\n        if (!control.value.match(/^\\d+$/)) {\r\n            return {numeroTelefonoInvalido: true};\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /*\r\n    La siguiente funcion permite validar que una nota sea correcta. El metodo recibe como argumento el campo para insertar\r\n    nota\r\n    */\r\n\r\n    validarNota = (control: FormControl): {[s: string]: boolean} => {\r\n        if (!control.value.match(/^2|3|4|5$/)) {\r\n            return {notaInvalida: true};\r\n        }\r\n        return null;\r\n        }\r\n\r\n    getValidarNumeroIdentidad() {\r\n        return this.validarNumeroIdentidad;\r\n    }\r\n\r\n    getValidarNumeroTelefono() {\r\n        return this.validarNumeroTelefono;\r\n    }\r\n\r\n    getValidarNota() {\r\n        return this.validarNota;\r\n    }\r\n\r\n}\r\n","import { FormControl } from '@angular/forms';\r\n\r\n// La siguiente clase valida que los campos para insertar o editar un usuario sean correctos\r\n\r\nexport class ValidarCampoUsuario {\r\n\r\n   /*\r\n   La siguiente funcion permite validar que un permiso sea correcta. El metodo recibe como argumento el campo para insertar\r\n   nota\r\n   */\r\n\r\n   validarPermiso = (control: FormControl): {[s: string]: boolean} => {    \r\n    if (!control.value.match(/^Visualizador|Gestion|Gestion General$/)) {        \r\n        return {notaInvalida: true};\r\n    }\r\n    return null;\r\n    }\r\n\r\n    getValidarPermiso() {\r\n        return this.validarPermiso;\r\n    } \r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { Observable } from 'rxjs';\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// La siguiente clase va a permitir autenticar usuario\n\nexport class AutenticacionService {\n  \n  // Inyectando HttpClient para acceder al backend\n\n  constructor(private http: HttpClient) { }\n\n  // El siguiente metodo recibe como argumento las credenciales de un usuario y permite autenticar a este\n\n  autenticar(credenciales): Observable<any> {\n    return this.http.post(`${URL}autenticar`, credenciales)\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// La siguiente clase permite editar la informacion de un Estudiante en el Backend\n\nexport class EditarEstudianteService {\n\n// Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n  // El siguiente metodo recibe como argumento un estudiante (ya editado). El metodo permitira actualizar la base de datos\n\n  editarEstudiante(estudiante: any): Observable<any> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.put(`${URL}editarEstudiante/${estudiante.id}`, estudiante, {headers: this.headers});\n  }\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// La siguiente clase permite editar la informacion de un Usuario en el Backend\n\nexport class EditarUsuarioService {\n\n// Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n  // El siguiente metodo recibe como argumento un usuario (ya editado). El metodo permitira actualizar la base de datos\n\n  editarUsuario(usuario: any): Observable<any> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.patch(`${URL}adminUsuario/${usuario.pk}/`, usuario, {headers: this.headers});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EliminarEstudianteService {\n\n  // Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n  eliminarEstudiante(estudiante: any): Observable<any> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.delete(`${URL}eliminarEstudiante/${estudiante.id}`, {headers: this.headers});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EliminarUsuarioService {\n  \n// Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n  eliminarUsuario(usuario: any): Observable<any> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.delete(`${URL}adminUsuario/${usuario.pk}/`, {headers: this.headers});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// Servicio para insertar estudiantes\n\nexport class InsertarEstudianteService {\n\n// Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n// El siguiente metodo permite insertar un estudiante\n\n  insertarEstudiante(estudiante: object): Observable<object> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.post(`${URL}crearEstudiante`, estudiante, {headers: this.headers});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// Servicio para insertar usuarios\n\nexport class InsertarUsuarioService {\n\n  // Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n// El siguiente metodo permite insertar un usuario\n\n  insertarUsuario(usuario: object): Observable<object> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.post(`${URL}adminUsuario/`, usuario, {headers: this.headers});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// El siguiente servicio permite obtener todos los estudiantes desde el backend\n\nexport class MostrarEstudiantesService {\n\n// Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n// El siguiente metodo permitira obtener los estudiantes desde el backend\n\n  mostrarEstudiantes() {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.get(`${URL}estudiantes`, {headers: this.headers});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// El siguiente servicio permite obtener todos los usuarios desde el backend\n\nexport class MostrarUsuariosService {\n\n  // Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n  mostrarUsuarios() {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.get(`${URL}usuarios`, {headers: this.headers});\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/*\nEl siguiente servicio permitira la comunicacion entre el componente Navbar y el componente Pagina Principal. El servicio\npermitira que se muestren las opciones de la pagina principal en el navbar, solamente cuando el usuario se encuentre en\nla pagina principal. Tambien permitira que el scroll se mueva por el navbar y la pagina principal\n*/\n\nexport class NavbarPrincipalInterfaceService {\n\n  // El siguiente atributo permitira emitir opciones que para poder moverse mediante scroll por una pagina\n\n  emisorOpciones: Subject<string>;\n\n  // El siguiente atributo permitira emitir un valor que indicara si la pagina principal esta activa o no\n  \n  emisorPaginaPrincipal: Subject<boolean>;  \n\n  constructor() { \n    this.emisorOpciones = new Subject();\n    this.emisorPaginaPrincipal = new Subject();\n  }\n\n  // El siguiente metodo recibe como argumento una opcion, la cual es emitida\n\n  emitirOpcion(opcion: string){\n    this.emisorOpciones.next(opcion);\n  }\n\n  /*\n  El siguiente metodo recibe como argumento un valor indicando si la pagina principal esta activa o no, este valor sera\n  emitido\n  */\n\n  emitirSiPaginaPrincipalActiva(estaActiva: boolean){\n    this.emisorPaginaPrincipal.next(estaActiva);\n  }\n\n  getEmisorOpciones():Subject<string>{\n    return this.emisorOpciones;\n  }\n\n  getEmisorPaginaPrincipal():Subject<boolean>{\n    return this.emisorPaginaPrincipal;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// El siguiente servicio permite obtener un estudiante desde el backend\n\nexport class ObtenerEstudianteService {\n\n// Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n// El siguiente metodo permite obtener un estudiante dado un id\n\n  obtenerEstudiante(idEstudiante: string): Observable<any> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.get(`${URL}obtenerEstudiante/${idEstudiante}`, {headers: this.headers});\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// El siguiente servicio permite obtener un usuario desde el backend\n\nexport class ObtenerUsuarioService {\n\n// Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();    \n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n  // El siguiente metodo permite obtener un usuario dado un id\n\n  obtenerUsuario(idUsuario: string): Observable<any> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.get(`${URL}obtenerUsuario/${idUsuario}/`, {headers: this.headers});  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// El siguiente servicio permite cambiar el valor de las etiquetas a mostrar en el paginador\n\nexport class PaginadorTraductorService {\n  \n  paginador: MatPaginator;\n\n  constructor() { }  \n\n  /*\n  El siguiente metodo recibe un MatPaginator como argumento e inicializa el atributo paginador de la clase con\n  el valor pasado\n  */\n\n  inicializarPagiandor(paginator: MatPaginator){\n    this.paginador = paginator;\n  }\n\n  /*\n  Este metodo recibe los valores de las etiquetas a cambiar en el pagiandor y se las cambia al atributo paginador de la\n  clase\n  */ \n\n  traductor(\n    firstPageLabel?: string,\n    itemsPerPageLabel?: string,\n    lastPageLabel?: string,\n    nextPageLabel?: string,\n    previousPageLabel?: string\n    )\n  {\n    this.paginador._intl.firstPageLabel = firstPageLabel;\n    this.paginador._intl.itemsPerPageLabel = itemsPerPageLabel;\n    this.paginador._intl.lastPageLabel = lastPageLabel;\n    this.paginador._intl.nextPageLabel = nextPageLabel;\n    this.paginador._intl.previousPageLabel = previousPageLabel;\n  }\n}\n\n\n","import { Injectable } from '@angular/core';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// El siguiente servicio permite obtener los permisos de los usuarios desde el backend\n\nexport class ObtenerPermisosService {\n\n// Los siguientes atributos permiten hacer consultas al backend con el token que identifica al usuario autenticado\n\n  headers: HttpHeaders;\n  token: string;\n\n/*\nEn el siguiente constructor se inyecta HttpClient que permitira acceder al backend, tambien se inyecta \nUsuarioAutenticadoOperacionesService, que permitira acceder al token del usuario autenticado\n*/\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) { }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n// El siguiente metodo permite obtener los permisos del backend\n\n  obtenerPermisos(): Observable<any> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.get(`${URL}permisos`,{headers: this.headers});\n  }\n  \n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { UsuarioAutenticado } from '../../Modelos/UsuarioAutenticado'\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// El siguiente servicio permitira emitir las credenciales del usuario autenticado\n\n\nexport class ProveedorCredencialesService {\n\n// El siguiente atributo permitira emitir objtetos tipo: UsuarioAutenticado  \n  \n private subject: Subject<UsuarioAutenticado>;\n  \n// En el siguiente constructor se inicializa el atributo subject  \n\n constructor() {\n   this.subject = new Subject<UsuarioAutenticado>();\n }\n\n/*\nEl siguiente metodo recibe como argumento un objeto tipo UsuarioAutenticado (contiene las credenciales del usua-\nrio autenticado). El metodo permitira que replaySubject emita el UsuarioAutenticado pasado como argumento\n*/\n\n emitirUsuarioAutenticado(usuarioAutenticado: UsuarioAutenticado){    \n  this.subject.next(usuarioAutenticado);\n}\n\n// El siguiente metodo retorna el atributo subject\n\ngetSubject(): Subject<UsuarioAutenticado>{\n  return this.subject;\n}\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport { URL } from '../../Modelos/ConexionBackend';\nimport { Observable } from 'rxjs';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// La siguiente clase perimite que un usuario salga de sesion\n\nexport class SalirSesionService {\n\n  headers: HttpHeaders;\n  token: string;\n\n  /*\n  En el siguiente metodo se inyecta HttpClient que permite conectarse con el backend y UsuarioAutenticadoOperacionesService\n  , que permite tener acceso al usuario autenticado.\n  */\n\n  constructor(private http: HttpClient, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) {\n   \n  }\n\n  inicializarToken(){\n    this.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n  }\n\n  inicializarHeaders(){\n    this.headers = new HttpHeaders({Authorization: `Token ${this.token}`});\n  }\n\n  // El siguiente método realiza el logout del sistema\n\n  salirSesion(): Observable<any> {\n    this.inicializarToken();\n    this.inicializarHeaders();\n    return this.http.post(`${URL}salirSesion`, {}, {headers: this.headers});   \n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { UsuarioAutenticado } from \"../../Modelos/UsuarioAutenticado\";\n\n@Injectable({\n  providedIn: 'root'\n})\n\n// La siguiente clase permite realizar las operaciones con las credenciales de los usuarios autenticados\n\nexport class UsuarioAutenticadoOperacionesService {\n\n  constructor() {\n    \n  }\n\n  setUsuarioAutenticado(usuarioAutenticado: UsuarioAutenticado){\n    localStorage.setItem('usuarioActual', JSON.stringify(usuarioAutenticado));\n  }\n\n  getUsuarioAutenticado() {\n    let usuarioAutenticado = new UsuarioAutenticado(JSON.parse(localStorage.getItem('usuarioActual')));\n  \treturn usuarioAutenticado;\n  }\n\n  // El siguiente metodo elimina las credenciales del usuario del navegador\n  \n  eliminarUsuarioAutenticado(){    \n    localStorage.removeItem('usuarioActual');    \n  }\n\n  // El siguiente metodo retorna si un usuario esta autenticado\n\n  hayUsuarioAutenticado():boolean {\n    const usuarioAutenticado = JSON.parse(localStorage.getItem('usuarioActual'));\n    return usuarioAutenticado !=null;\n  }\n\n}\n","// Modulos\n\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MostrarUsuariosModule } from \"../app/usuario/mostrar-usuarios/mostrar-usuarios.module\";\n\n// Componentes\n\nimport { CrearEstudianteComponent } from '../app/estudiante/crear-estudiante/crear-estudiante.component';\nimport { MostrarEstudiantesComponent } from '../app/estudiante/mostrar-estudiantes/mostrar-estudiantes.component';\nimport { EditarEstudianteComponent } from './estudiante/editar-estudiante/editar-estudiante.component';\nimport { InsertarUsuarioComponent } from '../app/usuario/insertar-usuario/insertar-usuario.component';\nimport { MostrarUsuariosComponent } from './usuario/mostrar-usuarios/mostrar-usuarios.component';\nimport { EditarUsuarioComponent } from './usuario/editar-usuario/editar-usuario.component';\nimport { AutenticacionComponent } from './autenticacion/autenticacion.component';\nimport { PaginaPrincipalComponent } from './pagina-principal/pagina-principal.component';\nimport { GestionGeneralGuardGuard } from './Guards/GestionGeneralGuard/gestion-general-guard.guard';\nimport { GestionGuardGuard } from './Guards/GestionGuard/gestion-guard.guard';\nimport { VisualizadorGuardGuard } from './Guards/VisualizadorGuard/visualizador-guard.guard';\n\n\nconst routes: Routes = [\n  {path: 'insertarEstudiante', component: CrearEstudianteComponent, canActivate: [ GestionGuardGuard ]},\n  {path: 'mostrarEstudiantes', component: MostrarEstudiantesComponent, canActivate: [ VisualizadorGuardGuard ]},\n  {path: 'editarStudent/:id', component: EditarEstudianteComponent, canActivate: [ GestionGuardGuard ]},\n  {path: 'insertarUsuario', component: InsertarUsuarioComponent, canActivate: [ GestionGeneralGuardGuard ]},\n  {path: 'mostrarUsuarios', component: MostrarUsuariosComponent, canActivate: [ GestionGuardGuard ]},\n  {path: 'editarUsuario/:id', component: EditarUsuarioComponent, canActivate: [ GestionGeneralGuardGuard ]}, \n  {path: 'autenticacion', component: AutenticacionComponent}, \n  {path: 'paginaPrincipal', component: PaginaPrincipalComponent},\n  {path: '**', redirectTo: 'paginaPrincipal'},\n\n];\n\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {anchorScrolling: 'enabled'})],\n  exports: [RouterModule, MostrarUsuariosModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'crud';\n}\n","<app-nav-bar></app-nav-bar>\r\n\r\n\r\n\r\n<router-outlet></router-outlet>\r\n\r\n\r\n","// Modulos\n\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\n\nimport { MatInputModule } from '@angular/material/input';\nimport { MatPaginatorModule, MatPaginatorIntl } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\n\nimport { MostrarUsuariosModule } from './usuario/mostrar-usuarios/mostrar-usuarios.module'\nimport { CustomMatPaginatorIntl } from '../app/Modelos/PaginadorEspanish';\nimport {APP_BASE_HREF} from '@angular/common';\n\n// Servicios\n\nimport { InsertarEstudianteService } from './Servicios/InsertarEstudiante/insertar-estudiante.service';\nimport { MostrarEstudiantesService } from './Servicios/MostrarEstudiantes/mostrar-estudiantes.service';\nimport { EditarEstudianteService } from './Servicios/EditarEstudiante/editar-estudiante.service';\nimport { ObtenerEstudianteService } from './Servicios/ObtenerEstudiante/obtener-estudiante.service';\nimport { InsertarUsuarioService } from \"./Servicios/InsertarUsuario/insertar-usuario.service\";\nimport { ObtenerPermisosService } from \"./Servicios/Permisos/obtener-permisos.service\";\nimport { EliminarEstudianteService } from \"./Servicios/EliminarEstudiante/eliminar-estudiante.service\";\nimport { MostrarUsuariosService } from \"./Servicios/MostrarUsuarios/mostrar-usuarios.service\";\nimport { PaginadorTraductorService } from \"./Servicios/PaginadorTraductor/paginador-traductor.service\";\nimport { EliminarUsuarioService } from \"./Servicios/EliminarUsuario/eliminar-usuario.service\";\nimport { ObtenerUsuarioService } from \"./Servicios/ObtenerUsuario/obtener-usuario.service\";\nimport { EditarUsuarioService } from \"./Servicios/EditarUsuario/editar-usuario.service\";\nimport { AutenticacionService } from \"./Servicios/Autenticacion/autenticacion.service\";\nimport { UsuarioAutenticadoOperacionesService } from \"./Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\nimport { ProveedorCredencialesService } from \"./Servicios/ProveedorCredenciales/proveedor-credenciales.service\";\nimport { SalirSesionService } from \"./Servicios/SalirSesion/salir-sesion.service\";\nimport { NavbarPrincipalInterfaceService } from \"./Servicios/NavbarPrincipalInterface/navbar-principal-interface.service\";\n\n// Componentes\n\nimport { MostrarEstudiantesComponent } from './estudiante/mostrar-estudiantes/mostrar-estudiantes.component';\nimport { EditarEstudianteComponent } from './estudiante/editar-estudiante/editar-estudiante.component';\nimport { CrearEstudianteComponent } from './estudiante/crear-estudiante/crear-estudiante.component';\nimport { InsertarUsuarioComponent } from './usuario/insertar-usuario/insertar-usuario.component';\nimport { EditarUsuarioComponent } from \"./usuario/editar-usuario/editar-usuario.component\";\nimport { AutenticacionComponent } from './autenticacion/autenticacion.component';\nimport { PaginaPrincipalComponent } from './pagina-principal/pagina-principal.component';\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CrearEstudianteComponent,\n    MostrarEstudiantesComponent,\n    EditarEstudianteComponent,\n    InsertarUsuarioComponent,\n    EditarUsuarioComponent,\n    AutenticacionComponent,\n    PaginaPrincipalComponent,\n    NavBarComponent,\n    \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    HttpClientModule,\n    MatPaginatorModule,\n    MatTableModule,\n    MatIconModule,\n    MatButtonModule,\n    MostrarUsuariosModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatToolbarModule,\n    MatMenuModule,\n    \n  ],\n  providers: [\n    InsertarEstudianteService,\n    MostrarEstudiantesService,\n    EditarEstudianteService,\n    ObtenerEstudianteService,\n    InsertarUsuarioService,\n    ObtenerPermisosService,\n    EliminarEstudianteService,\n    MostrarUsuariosService,\n    PaginadorTraductorService,\n    EliminarUsuarioService,\n    ObtenerUsuarioService,\n    EditarUsuarioService,\n    AutenticacionService,\n    UsuarioAutenticadoOperacionesService,\n    ProveedorCredencialesService,\n    SalirSesionService,\n    NavbarPrincipalInterfaceService,\n    {\n      provide: MatPaginatorIntl,      \n      useClass: CustomMatPaginatorIntl\n    },\n    {provide: APP_BASE_HREF, useValue: '/' },   \n  ],\n\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\nimport {FormBuilder, FormGroup, AbstractControl, Validators} from '@angular/forms';\nimport { AutenticacionService } from \"../Servicios/Autenticacion/autenticacion.service\";\nimport { UsuarioAutenticadoOperacionesService } from \"../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\nimport { UsuarioAutenticado } from \"../Modelos/UsuarioAutenticado\";\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-autenticacion',\n  templateUrl: './autenticacion.component.html',\n  styleUrls: ['./autenticacion.component.css']\n})\n\n// La siguiente clase va a permitir autenticar Usuarios\n\nexport class AutenticacionComponent {\n\n  // Definiento formulario con sus campos\n\n  form: FormGroup;\n  username: AbstractControl;\n  password: AbstractControl;\n\n  /*\n  El siguiente atributo se empleara para almacenar la cadena del username del campo de texto, cuando el username\n  y/o password sean invalidos, para luego compararlo con los nuevos valores que se escriban en este campo de texto.\n  */\n\n  valorUsername: string;\n\n  /*\n  El siguiente atributo se empleara para almacenar la cadena del password del campo de texto, cuando el username\n  y/o password sean invalidos, para luego compararlo con los nuevos valores que se escriban en este campo de texto.\n  */\n\n  valorPassword: string;\n\n  /*\n  El siguiente atributo se empleara para mostrar en el template mensajes de error cuando username y/o password\n  sean invalidos\n  */\n\n  credencialesInvalidas: boolean;\n\n  // El siguiente atributo permite mostrar un mensaje de error cuando las credenciales del usuario sean invalidas\n\n  credencialesInvalidasMensaje: boolean;\n\n  // El siguiente atributo almacenara los valores de los campos por defecto del formulario\n\n  camposFormulario: any;\n\n  // El siguiente atributo permite mostrar un mensaje de error cuando haya problemas de conexion con el backend\n\n  mensajeErrorServidor: boolean;\n\n  /* \n  En este constructos se inyectan las dependencias para crear un formulario, para autenticar un usuario, para guardar las\n  credenciales en la memoria del navegador. Se inyecta una dependencia para navegar hacia la pagina principal. Aqui se ini-\n  cializan los campos del formulario para autencticar usuarios a sus valores por\n  defecto\n  */\n\n  constructor(\n    private fb: FormBuilder,\n    private autenticacionServ: AutenticacionService,\n    private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService,\n    private router: Router\n    ) {\n    this.inicializarCamposFormulario();\n    this.reset();\n   }\n\n  // El siguiente metodo permite inicializar el atributo camposFormulario\n\n  inicializarCamposFormulario() {\n    this.camposFormulario = {\n      username: ['', Validators.required],\n      password: ['', Validators.required]      \n    };\n  }\n\n  getUsuarioAutenticadoOperacionesServ(){\n    return this.usuarioAutenticadoOperacionesServ;\n  }\n\n  // El siguiente metodo permite resetear el formulario\n\n  reset() {\n    this.form = this.fb.group(this.camposFormulario);\n    this.username = this.form.controls.username;\n    this.password = this.form.controls.password;\n    this.valorUsername = '';\n    this.valorPassword = '';\n    this.credencialesInvalidas = false;\n    this.variacionCampoControl(this.username, 'username');\n    this.variacionCampoControl(this.password, 'password');    \n  }\n\n  /*\n  El siguiente metodo recibe como argumento un AbstractControl (username o password), el cual representa un campo de tex-\n  to y el nombre del campo relacionado al primer argumento (username o password). Aqui nos suscribiremos a los cambios rea-\n  lizados en el AbstractControl. Esto se realiza para cuando se inserte un username y/o password incorrectos, el mensaje de\n  error desaparezca cuando el usuario inserte un username o password distinto a los insertados anteriormente\n  */\n\n  variacionCampoControl(campoCredencial: AbstractControl, nombreCampo: string) {\n    campoCredencial.valueChanges.subscribe((value) => {\n      if (this.credencialesInvalidas) {\n        let valorErroneo = (nombreCampo == 'username') ? this.valorUsername: this.valorPassword;\n        if (valorErroneo !== value) {\n          this.credencialesInvalidas = false;\n          this.valorUsername = '';\n          this.valorPassword = '';\n        }\n      }\n    });\n  }\n\n  /* \n  El siguiente metodo recibe las credenciales del usuario a autenticar desde el formulario. El metodo permitira autenticar\n  al usuario, luego navegara hacia la pagina principal. En caso de haber error al conectar con el servidor se mostrara un\n  mensaje de error. En caso de que las credenciales sean incorrectas, se mostraran mensajes de error en el formulario\n  */\n\n  autenticar(credenciales){\n    this.autenticacionServ.autenticar(credenciales).subscribe(\n      (usuarioCredenciales)=> {\n        this.guardarCredenciales(usuarioCredenciales);\n        this.navegarPaginaPrincipal();\n      },\n      (error) => {        \n        if (error.status === 0) {\n          this.mostrarMensajeErrorServidor();\n        }\n        else {\n          this.mostrarErrorEnFormulario(credenciales);\n          this.credencialesInvalidMensaje();\n        }\n      }\n    )\n  }\n\n  // El siguiente metodo recibe las credenciales del usuario autenticado y las guarda en la memoria del navegador\n\n  guardarCredenciales(usuarioCredenciales){\n    let usuarioAutenticado: UsuarioAutenticado = new UsuarioAutenticado(usuarioCredenciales);\n    this.usuarioAutenticadoOperacionesServ.setUsuarioAutenticado(usuarioAutenticado);\n  } \n\n  // El siguiente metodo permitira navegar hacia la pagina principal\n\n  navegarPaginaPrincipal() {\n    this.router.navigate([`paginaPrincipal`]);\n  }\n\n  /*\n  El siguiente metodo recibe las credenciales que el usuario introdujo en el formulario y permite que se muestren los\n  campos de este con mensajes de error\n  */\n\n  mostrarErrorEnFormulario(credenciales){\n    this.credencialesInvalidas = true;\n    this.valorUsername = credenciales.username;\n    this.valorPassword = credenciales.password;\n  }\n\n  // El siguiente metodo mostrara un mensaje de error de 3 segundos cuando las credenciales del usuario sean incorrectas\n\n  credencialesInvalidMensaje(){\n    this.credencialesInvalidasMensaje = true;\n    setTimeout(\n      () => this.credencialesInvalidasMensaje = false,\n      3000\n    );\n  }\n\n  getCredencialesInvalidas(){\n    return this.credencialesInvalidas;\n  }\n\n  getCredencialesInvalidasMensaje(){\n    return this.credencialesInvalidasMensaje;\n  }\n\n  // El siguiente metodo permite que en la vista se muestre un mensaje de error cuando haya error al conectar con el backend\n\n  mostrarMensajeErrorServidor() {\n    this.mensajeErrorServidor = true;\n    setTimeout(\n      () => this.mensajeErrorServidor = false,\n      3000\n    );\n  }  \n\n}\n","<!--Mensaje de error que se muestra cuando no hay conexion con el backend-->\n\n<div *ngIf = \"mensajeErrorServidor\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Error al conectarse con el servidor!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje de error que se muestra cuando las credenciales del usuario sean incorrectas-->\n\n<div *ngIf = \"getCredencialesInvalidasMensaje()\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Las credenciales del usuario son incorrectas!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Formulario para autenticar usuarios-->\n\n<div class=\"container margenSuperior\">\n    <div class=\"row\">\n        <div class=\"col-4 offset-4\">\n            <div class=\"card bg-light mb-3\">\n                <div class=\"card-header\"><h1 class='cabeceraFormulario'>Autenticar Usuario</h1></div>\n                <div class=\"card-body\">              \n                    <form [formGroup]=\"form\" (ngSubmit) = \"autenticar(form.value)\">    \n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <input type=\"text\" class=\"form-control\" id='username' [formControl]=\"username\" placeholder=\"username\" [class.border-danger]='(!username.valid && username.touched) || getCredencialesInvalidas()' aria-describedby='usernameError'>            \n                                <small *ngIf='username.touched && !username.valid' id='usernameError' class='form-text text-muted'>\n                                    Campo vacío\n                                </small>\n                                <small *ngIf='getCredencialesInvalidas()' id='usernameError' class='form-text text-muted'>\n                                    Credenciales incorrectas\n                                </small>\n                            </div>                                  \n                        </div> \n\n                        <div class=\"form-row\">                            \n                            <div class=\"form-group col\">\n                                <input type=\"password\" class=\"form-control\" [formControl]=\"password\" id='password' placeholder=\"password\" [class.border-danger]='(password.touched && !password.valid) || getCredencialesInvalidas()' aria-describedby='passwordError'>            \n                                <small *ngIf='password.touched && !password.valid' id='passwordError' class='form-text text-muted'>\n                                    Campo vacío\n                                </small>\n                                <small *ngIf='getCredencialesInvalidas()' id='passwordError' class='form-text text-muted'>\n                                    Credenciales incorrectas\n                                </small>\n                            </div>        \n                        </div>                     \n                        \n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col-4 offset-4\">                                    \n                                    <button type=\"submit\" [disabled] = \"!form.valid\" id='aceptar' class=\"btn btn-primary\">Aceptar</button>                                                                                                        \n                                </div>\n                                <div class=\"col-4\">                                                                              \n                                    <button type=\"button\" class=\"btn btn-secondary\" (click)='reset()'>Cancelar</button>                                    \n                                </div>                      \n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, AbstractControl, Validators} from '@angular/forms';\nimport { InsertarEstudianteService } from '../../Servicios/InsertarEstudiante/insertar-estudiante.service';\nimport { ValidadoresCampos } from '../../Modelos/ValidadoresCampos';\n\n@Component({\n  selector: 'app-crear-estudiante',\n  templateUrl: './crear-estudiante.component.html',\n  styleUrls: ['./crear-estudiante.component.css']\n})\n\n// La siguiente clase va a permitir insertar Estudiantes\n\nexport class CrearEstudianteComponent implements OnInit {\n\n  // Definiento formulario con sus campos\n\n  form: FormGroup;\n  nombre: AbstractControl;\n  apellidos: AbstractControl;\n  numeroIdentidad: AbstractControl;\n  nota: AbstractControl;\n  numeroTelefono: AbstractControl;\n\n  // El siguiente objeto permite validar campos del formulario\n\n  validadoresCampos: ValidadoresCampos;\n\n  // El siguiente atributo almacenara los valores de los campos por defecto del formulario\n\n  camposFormulario: any;\n\n  // El siguiente atributo se emplea para mostrar mensaje de error al insertar un estudiante\n\n  errorMendajeNiRepetido: boolean;\n\n  /*\n  El siguiente atributo permite mostrar un mensaje en el formulario al insertar un estudiante con el Numero de identidad repe-\n  tido\n  */\n\n  errorNiRepetido: boolean;\n\n  // El siguienta atributo almacenara el numero de identidad repetido\n\n  numeroIdentidadRepetido: string;\n\n  // El siguiente atributo permitira mostrar un mensaje cuando se inserte un estudiante\n\n  estudianteInsertado: boolean;\n\n  // El siguiente atributo permite mostrar un mensaje de error cuando haya problemas de conexion con el backend\n\n  mensajeErrorServidor: boolean;\n\n  /*\n  En el siguiene constructor inicializamos el formulario y sus campos e inyectamos la dependencia: FormBuilder y\n  InsertarEstudianteServ\n  */\n\n  constructor(private fb: FormBuilder, private InsertarEstudianteServ: InsertarEstudianteService) {\n    this.errorMendajeNiRepetido = false;\n    this.errorNiRepetido = false;\n    this.estudianteInsertado = false;\n    this.numeroIdentidadRepetido = '';\n    this.validadoresCampos = new ValidadoresCampos();\n    this.inicializarCamposFormulario();\n    this.reset();\n    this.detectarCambiosNumeroIdentidad();\n  }\n\n  // El siguiente metodo permite inicializar el atributo camposFormulario\n\n  inicializarCamposFormulario() {\n    this.camposFormulario = {\n      nombre: ['', Validators.required],\n      apellidos: ['', Validators.required],\n      numeroIdentidad: ['', Validators.compose([Validators.required, this.validadoresCampos.getValidarNumeroIdentidad()])],\n      nota: ['Nota', Validators.compose([this.validadoresCampos.getValidarNota()])],\n      numeroTelefono: ['', Validators.compose([this.validadoresCampos.getValidarNumeroTelefono()])]\n    };\n  }\n\n  /*\n  El siguiente medodo permite que cuando haya un numero de identidad repetido, al cambiar este en el campo de texto, no\n  se muestre el error en el campo de texto\n  */\n\n  detectarCambiosNumeroIdentidad(): void {\n    this.numeroIdentidad.valueChanges\n    .subscribe(\n      (next) => {\n        if (this.errorNiRepetido && this.numeroIdentidadRepetido !== next) {\n          this.errorNiRepetido = false;\n        }\n      }\n    );\n  }\n\n  // El siguiente metodo permite resetear el formulario\n\n  reset() {\n    this.form = this.fb.group(this.camposFormulario);\n    this.nombre = this.form.controls.nombre;\n    this.apellidos = this.form.controls.apellidos;\n    this.numeroIdentidad = this.form.controls.numeroIdentidad;\n    this.nota = this.form.controls.nota;\n    this.numeroTelefono = this.form.controls.numeroTelefono;\n  }\n\n  ngOnInit(): void {\n  }\n\n  /*\n  El siguiente metodo permite insertar un estudiante en la bd. Este metodo recibe como argumento los datos de un formulario\n  , luego intenta insertar el estudiante en la bd. Si se inserta correctamente el estudiante se mostrara un mensaje en el\n  template explicando la situacion, si hay hay un error tambie.\n  */\n\n  submit(estudiante): void {\n    this.InsertarEstudianteServ.insertarEstudiante(estudiante)\n    .subscribe(\n    (resp: any) => {\n      this.reset();\n      this.estudianteInsert();\n    },\n    (error: any) => {\n      if (error.status === 0) {\n        this.mostrarMensajeErrorServidor();\n      } else {\n        this.errorNiRepetido = true;\n        this.errorInsertarUsuario(estudiante.numeroIdentidad);\n      }\n    }\n    );\n  }\n\n  // El siguiente metodo permite que en la vista se muestre un mensaje de error cuando haya error al conectar con el backend\n\n  mostrarMensajeErrorServidor() {\n    this.mensajeErrorServidor = true;\n    setTimeout(\n      () => this.mensajeErrorServidor = false,\n      3000\n    );\n  }\n\n  // El siguiente metodo permite que en la vista se muestre un mensaje de error\n\n  errorInsertarUsuario(numeroIdentidad) {\n    this.errorMendajeNiRepetido = true;\n    this.numeroIdentidadRepetido = numeroIdentidad;\n    setTimeout(\n      () => this.errorMendajeNiRepetido = false,\n      3000\n    );\n  }\n\n  /*\n  El siguiente metodo permite mostrar un mensaje diciendo que se ha insertado el usuario, el cual desaparecera a los 3\n  segundos\n  */\n\n  estudianteInsert() {\n    this.estudianteInsertado = true;\n    setTimeout(\n      () => this.estudianteInsertado = false,\n      3000\n    );\n  }\n\n  // El siguiene metodo permitira mostrar el formulario en su forma original, incluyendo el posible error de ni repetido\n\n  formularioPorDefecto(){\n    this.errorNiRepetido = false;\n    this.reset();\n  }\n\n\n}\n","<!--Mensaje de error que se muestra cuando no hay conexion con el backend-->\n\n<div *ngIf = \"mensajeErrorServidor\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Error al conectarse con el servidor!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje de error que se muestra cuando se intenta insertar un estudiante con un numero de identidad existente-->\n\n<div *ngIf = \"errorMendajeNiRepetido\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Ya existe un estudiante con ese número de identidad!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje al insertar un estudiante-->\n\n<div *ngIf='estudianteInsertado' class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-6 offset-3\">\n            <div class=\"alert alert-success\" role=\"alert\">            \n                <h2 style='text-align: center' class=\"alert-heading\">¡Estudiante insertado correctamente!</h2>             \n            </div>            \n        </div>\n    </div>\n</div>\n\n<!--Formulario para insertar estudiantes-->\n\n<div class=\"container margenSuperior\">\n    <div class=\"row\">\n        <div class=\"col-6 offset-3\">\n            <div class=\"card bg-light mb-3\">\n                <div class=\"card-header\"><h1 class='cabeceraFormulario'>Insertar Estudiante</h1></div>\n                <div class=\"card-body\">              \n                    <form [formGroup]=\"form\" (ngSubmit) = \"submit(form.value)\">    \n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <input type=\"text\" class=\"form-control\" id='nombre' [formControl]=\"nombre\" placeholder=\"nombre\" [class.border-danger]='!nombre.valid && nombre.touched' aria-describedby='nombreError'>            \n                                <small *ngIf='nombre.touched && !nombre.valid' id='nombreError' class='form-text text-muted'>\n                                    Nombre incorrecto\n                                </small>\n                            </div>\n                            <div class=\"col\">\n                                <input type=\"text\" class=\"form-control\" [formControl]=\"apellidos\" id='apellidos' placeholder=\"apellidos\" [class.border-danger]='apellidos.touched && !apellidos.valid' aria-describedby='apellidosError'>            \n                                <small *ngIf='apellidos.touched && !apellidos.valid' id='apellidosError' class='form-text text-muted'>\n                                    Apellidos incorrectos\n                                </small>\n                            </div>        \n                        </div> \n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <input type=\"text\" class=\"form-control\" [formControl]=\"numeroIdentidad\" placeholder=\"Numero de identidad\" id='numeroIdentidad' [class.border-danger]=\"errorNiRepetido || (numeroIdentidad.touched && !numeroIdentidad.valid)\" aria-describedby='numeroIdentidadError'>            \n                                <small *ngIf=\"errorNiRepetido || (numeroIdentidad.touched && !numeroIdentidad.valid)\" id='numeroIdentidadError' class='form-text text-muted'>\n                                    Número de identidad incorrecto\n                                </small>\n                            </div>\n                                                                                                \n                            <div class=\"form-group col\">\n                                <input type=\"text\" class=\"form-control\" [formControl]=\"numeroTelefono\" placeholder=\"Numero de Teléfono\" id='numeroTelefono' [class.border-danger]='numeroTelefono.touched && !numeroTelefono.valid' aria-describedby='numeroTelefonoError'>            \n                                <small *ngIf='numeroTelefono.touched && !numeroTelefono.valid' id='numeroTelefonoError' class='form-text text-muted'>\n                                    Número de telefono incorrecto\n                                </small>\n                            </div>                           \n                        </div>\n                        <div class=\"form-row\">\n                            <div class=\"form-group col-6\">                                                          \n                                <select class=\"form-control\" [formControl]=\"nota\" id=\"nota\" [class.border-danger]='nota.touched && !nota.valid' aria-describedby='notaError'>\n                                    <option>Nota</option>                                       \n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </select>\n                                <small *ngIf='nota.touched && !nota.valid' id='notaError'>\n                                    valor de nota incorrecto\n                                </small>\n                            </div>\n                        </div>\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col-3 offset-6 px-0\">                                    \n                                    <button type=\"submit\" [disabled] = \"!form.valid\" id='aceptar' class=\"btn btn-primary\">Aceptar</button>                                                                                                        \n                                </div>\n                                <div class=\"col-3 px-0\">                                                                              \n                                    <button type=\"button\" class=\"btn btn-secondary\" (click)='formularioPorDefecto()'>Cancelar</button>                                    \n                                </div>                      \n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { ObtenerEstudianteService } from '../../Servicios/ObtenerEstudiante/obtener-estudiante.service';\nimport { EditarEstudianteService } from '../../Servicios/EditarEstudiante/editar-estudiante.service';\n\nimport { Estudiante } from 'src/app/Modelos/Estudiante';\nimport { ValidadoresCampos } from 'src/app/Modelos/ValidadoresCampos';\n\n@Component({\n  selector: 'app-editar-estudiante',\n  templateUrl: './editar-estudiante.component.html',\n  styleUrls: ['./editar-estudiante.component.css']\n})\nexport class EditarEstudianteComponent implements OnInit {\n\n  // El siguiente objeto permite validar campos del formulario\n\n  validadoresCampos: ValidadoresCampos;\n\n  // El siguiente atributo va almacenar la informacion del estudiante a editar\n\n  estudiante: Estudiante;\n\n  // El siguiente atributo almacenara los valores de los campos por defecto del formulario\n\n  camposFormulario: any;\n\n  // id del estudiante\n\n  idEstudiante: string;\n\n  // Definiento formulario con sus campos\n\n  form: FormGroup;\n  nombre: AbstractControl;\n  apellidos: AbstractControl;\n  numeroIdentidad: AbstractControl;\n  nota: AbstractControl;\n  numeroTelefono: AbstractControl;\n\n  // El siguiente atributo permite mostrar el formulario al obtener el estudiante a editar\n\n  estudianteObtenido: boolean;\n\n  // El siguiente atributo se emplea para mostrar mensaje de error al estudiante usuario\n\n  errorMensajeNiRepetido: boolean;\n\n  // El siguiente atributo se emplea para mostrar mensaje de error cuando no se pueda conectar con el backend\n\n  errorMensajeBackend: boolean;\n\n  /*\n  El siguiente atributo permite mostrar un mensaje en el formulario al editar un estudiante con el Numero de identidad repe-\n  tido\n  */\n\n  errorNiRepetido: boolean;\n\n  // El siguienta atributo almacenara el numero de identidad repetido\n\n  numeroIdentidadRepetido: string;\n\n  // Este atributo permite mostrar un mensaje cuando se edite un estudiante\n\n  estudianteEditado: boolean;\n\n  // En este constructor se inyectan las dependencias y se inicializan algunos atributos\n\n  constructor(\n    private route: ActivatedRoute,\n    private obtenerEstudianteServ: ObtenerEstudianteService,\n    private fb: FormBuilder,\n    private editarEstudianteServ: EditarEstudianteService) {\n    this.validadoresCampos = new ValidadoresCampos();\n    this.estudianteObtenido = false;\n  }\n\n  /*\n  En este metodo se inicializara el atributo idEstudiante a partir de las url conque se invoco a este componente. Tambien\n  se mostrara un formulario con los datos de un estudiante para ser editado. En caso de que haya problemas con obtener los\n  datos del estudiantes desde el backend, se mostrara un mesaje explicando la situacion\n  */\n\n  ngOnInit(): void {\n    this.route.params.subscribe(\n      (params) => {\n        this.idEstudiante = params.id;\n        this.obtenerEstudianteServ.obtenerEstudiante(this.idEstudiante).subscribe(\n          (estudiante) => {\n            this.mostrarFormulario(estudiante);\n            this.detectarCambiosNumeroIdentidad();\n          },\n          () => {\n            this.setErrorMensajeBackend();\n          }\n        );\n      }\n    );\n  }\n\n  setErrorMensajeBackend() {\n    this.errorMensajeBackend = true;\n  }\n\n  /*\n  El siguiente metodo permite mostrar un mensaje diciendo que se ha editado el estudiantes, el cual desaparecera a los 3\n  segundos\n  */\n\n  errorAlObtenerEstudiante() {\n    this.errorMensajeBackend = true;\n    setTimeout(\n      () => this.errorMensajeBackend = false,\n      3000\n    );\n  }\n\n\n  /*\n  El siguiente medodo permite que cuando haya un numero de identidad repetido, al cambiar este en el campo de texto, no\n  se muestre el error en el campo de texto\n  */\n\n  detectarCambiosNumeroIdentidad(): void {\n    this.numeroIdentidad.valueChanges\n    .subscribe(\n      (next) => {\n        if (this.errorNiRepetido && this.numeroIdentidadRepetido !== next) {\n          this.errorNiRepetido = false;\n        }\n      }\n    );\n  }\n\n  // El siguiente metodo permite mostrar el formulario para editar al estudiante\n\n  mostrarFormulario(estudiante) {\n    this.inicializarEstudiante(estudiante);\n    this.inicializarCamposFormulario();\n    this.reset();\n    this.setEstudianteObtenido();\n  }\n\n  // Este metodo actualiza el atributo estudianteObtenido a true\n\n  setEstudianteObtenido() {\n    this.estudianteObtenido = true;\n  }\n\n  getEstudianteObtenido() {\n    return this.estudianteObtenido;\n  }\n\n  /*\n  El siguiente metodo recibe como argumento un objeto con informacion de un estudiante e inicializa el\n  atributo: estudiante\n  */\n\n  inicializarEstudiante(estudiante) {\n    this.estudiante = new Estudiante(estudiante);\n  }\n\n  // El siguiente metodo permite inicializar el atributo camposFormulario\n\n  inicializarCamposFormulario() {\n    this.camposFormulario = {\n      nombre: [this.estudiante.nombre, Validators.required],\n      apellidos: [this.estudiante.apellidos, Validators.required],\n      numeroIdentidad: [this.estudiante.numeroIdentidad, Validators.compose(\n        [Validators.required, this.validadoresCampos.getValidarNumeroIdentidad()])],\n      nota: [this.estudiante.nota.toString(), Validators.compose(\n        [Validators.required, this.validadoresCampos.getValidarNota()])],\n      numeroTelefono: [this.estudiante.numeroTelefono.toString(), Validators.compose(\n        [Validators.required, this.validadoresCampos.getValidarNumeroTelefono()])]\n    };\n  }\n\n  // El siguiente metodo permite resetear el formulario\n\n  reset() {\n    this.form = this.fb.group(this.camposFormulario);\n    this.nombre = this.form.controls.nombre;\n    this.apellidos = this.form.controls.apellidos;\n    this.numeroIdentidad = this.form.controls.numeroIdentidad;\n    this.nota = this.form.controls.nota;\n    this.numeroTelefono = this.form.controls.numeroTelefono;\n  }\n\n  /*\n  El siguiente metodo permite editar la informacion de un estudiante. Al editarse la informacion de forma correcta se mos-\n  trara un mensaje explicando la situacion. Tambien se mostrara un mensaje de error cuando haya problemas al conectarse con\n  el backend\n  */\n\n  submit(estudiante) {\n    estudiante.id = this.estudiante.id;\n    this.editarEstudianteServ.editarEstudiante(estudiante).subscribe(\n      (estudiante) => {\n        this.mostrarFormulario(estudiante);\n        this.mensajeEstudianteEditado();\n      },\n      (error) => {\n        if (error.status === 400) {\n          this.mostrarMensajeErrorRepetido();\n          this.setErrorNiRepetido();\n          this.setNumeroIdentidadRepetido(estudiante.id);\n        }\n        if (error.status === 0) {\n          this.mostrarMensajeErrorBackend();\n        }\n      }\n    );\n  }\n\n  // El siguiente metodo permite que en la vista se muestre un mensaje de error cuando el ni del estudiante ya exista\n\n  mostrarMensajeErrorRepetido() {\n    this.errorMensajeNiRepetido = true;\n    setTimeout(\n      () => this.errorMensajeNiRepetido = false,\n      3000\n    );\n  }\n\n\n  // El siguiente metodo permite mostrar un mensaje de error por 3 segundos\n\n  mostrarMensajeErrorBackend() {\n    this.errorMensajeBackend = true;\n    setTimeout(\n      () => this.errorMensajeBackend = false,\n      3000\n    );\n  }\n\n  // Este metodo permite mostrar un mensaje de error en el campo numero de identidad\n\n  setErrorNiRepetido() {\n    this.errorNiRepetido = true;\n  }\n\n  setNumeroIdentidadRepetido(numeroIdentidad) {\n    this.numeroIdentidadRepetido = numeroIdentidad;\n  }\n\n  /*\n  El siguiente metodo permite mostrar un mensaje diciendo que se ha editado el usuario, el cual desaparecera a los 3\n  segundos\n  */\n\n mensajeEstudianteEditado() {\n  this.estudianteEditado = true;\n  setTimeout(\n    () => this.estudianteEditado = false,\n    3000\n  );\n}\n\n}\n","<!--breadcrumb para navegar hacia mostrar estudiantes-->\n\n<nav aria-label=\"breadcrumb\">\n  <ol class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\"><a routerLink='/mostrarEstudiantes'>Mostrar estudiantes</a></li>\n    <li class=\"breadcrumb-item active\" aria-current=\"page\">Editar estudiantes</li>\n  </ol>\n</nav>\n\n<!--Mensaje de error que se muestra cuando se intenta insertar un estudiante con un numero de identidad existente-->\n\n<div *ngIf = \"errorMensajeNiRepetido\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Ya existe un estudiante con ese número de identidad!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje de error que se muestra cuando no hay conexion con el backend-->\n\n<div *ngIf = \"errorMensajeBackend\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Error al conectarse con el servidor!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje al editar un usuario-->\n\n<div *ngIf='estudianteEditado' class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-6 offset-3\">\n            <div class=\"alert alert-success\" role=\"alert\">            \n                <h2 style='text-align: center' class=\"alert-heading\">¡Estudiante editado correctamente!</h2>             \n            </div>            \n        </div>\n    </div>\n</div>\n\n<!--Formulario para editar estudiantes-->\n\n<div class=\"container margenSuperior\" *ngIf='getEstudianteObtenido()'>\n    <div class=\"row\">\n        <div class=\"col-6 offset-3\">\n            <div class=\"card bg-light mb-3\">\n                <div class=\"card-header\"><h1 class='cabeceraFormulario'>Editar Estudiante</h1></div>\n                <div class=\"card-body\">              \n                    <form [formGroup]=\"form\" (ngSubmit) = \"submit(form.value)\">    \n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <label for=\"nombre\">Nombre</label>\n                                <input type=\"text\" class=\"form-control\" id='nombre' [formControl]=\"nombre\" placeholder=\"nombre\" [class.border-danger]='!nombre.valid && nombre.touched' aria-describedby='nombreError'>            \n                                <small *ngIf='nombre.touched && !nombre.valid' id='nombreError' class='form-text text-muted'>\n                                    Nombre incorrecto\n                                </small>\n                            </div>\n                            <div class=\"col\">\n                                <label for=\"apellidos\">Apellidos</label>\n                                <input type=\"text\" class=\"form-control\" [formControl]=\"apellidos\" id='apellidos' placeholder=\"apellidos\" [class.border-danger]='apellidos.touched && !apellidos.valid' aria-describedby='apellidosError'>            \n                                <small *ngIf='apellidos.touched && !apellidos.valid' id='apellidosError' class='form-text text-muted'>\n                                    Apellidos incorrectos\n                                </small>\n                            </div>        \n                        </div> \n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <label for=\"numeroIdentidad\">Número de identidad</label>\n                                <input type=\"text\" class=\"form-control\" [formControl]=\"numeroIdentidad\" placeholder=\"Numero de identidad\" id='numeroIdentidad' [class.border-danger]=\"errorNiRepetido || (numeroIdentidad.touched && !numeroIdentidad.valid)\" aria-describedby='numeroIdentidadError'>            \n                                <small *ngIf=\"errorNiRepetido || (numeroIdentidad.touched && !numeroIdentidad.valid)\" id='numeroIdentidadError' class='form-text text-muted'>\n                                    Número de identidad incorrecto\n                                </small>\n                            </div>\n                                                                                                \n                            <div class=\"form-group col\">\n                                <label for=\"numeroTelefono\">Número de telefono</label>\n                                <input type=\"text\" class=\"form-control\" [formControl]=\"numeroTelefono\" placeholder=\"Numero de Teléfono\" id='numeroTelefono' [class.border-danger]='numeroTelefono.touched && !numeroTelefono.valid' aria-describedby='numeroTelefonoError'>            \n                                <small *ngIf='numeroTelefono.touched && !numeroTelefono.valid' id='numeroTelefonoError' class='form-text text-muted'>\n                                    Número de telefono incorrecto\n                                </small>\n                            </div>                           \n                        </div>\n                        <div class=\"form-row\">\n                            <div class=\"form-group col-6\">\n                                <label for=\"nota\">Nota</label>                                                         \n                                <select class=\"form-control\" [formControl]=\"nota\" id=\"nota\" [class.border-danger]='nota.touched && !nota.valid' aria-describedby='notaError'>\n                                    <option>2</option>\n                                    <option>3</option>\n                                    <option>4</option>\n                                    <option>5</option>\n                                </select>\n                                <small *ngIf='nota.touched && !nota.valid' id='notaError'>\n                                    valor de nota incorrecto\n                                </small>\n                            </div>\n                        </div>\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col-3 offset-6 px-0\">                                    \n                                    <button type=\"submit\" [disabled] = \"!form.valid\" id='aceptar' class=\"btn btn-primary\">Aceptar</button>                                                                                                        \n                                </div>\n                                <div class=\"col-3 px-0\">                                                                              \n                                    <button class=\"btn btn-secondary\" (click)='reset()'>Cancelar</button>                                    \n                                </div>                      \n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MostrarEstudiantesService } from '../../Servicios/MostrarEstudiantes/mostrar-estudiantes.service';\nimport { EliminarEstudianteService } from '../../Servicios/EliminarEstudiante/eliminar-estudiante.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator} from '@angular/material/paginator';\nimport { Estudiante } from 'src/app/Modelos/Estudiante';\nimport { Router } from '@angular/router';\nimport { PaginadorTraductorService } from \"../../Servicios/PaginadorTraductor/paginador-traductor.service\";\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Component({\n  selector: 'app-mostrar-estudiantes',\n  templateUrl: './mostrar-estudiantes.component.html',\n  styleUrls: ['./mostrar-estudiantes.component.css']\n})\n\n// La siguiente clase permite mostrar los estudiantes en una tabla\n\nexport class MostrarEstudiantesComponent implements OnInit {\n\n  // Nombre de las columnas de la tabla\n\n  columnas: string[];\n\n  // Lista de estudianes\n\n  estudiantes: Estudiante[];\n\n  // Objeto que permitira mostrar los estudiantes en la tabla y el paginador\n\n  dataSource: MatTableDataSource<Estudiante>;\n\n  // Cantidad de estudiante que se pueden mostrar por pagina\n\n  pageSizeOptions: number[];\n\n  // Atributo para mostrar o no mensaje de error\n\n  errorConectarBacked: boolean;\n\n  // Paginador\n\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  // El siguiente atributo permitira mostrar un mensaje al eliminar un estudiante\n\n  estudianteEliminado: boolean;\n\n  /*\n  Inyectando el servicio MostrarEstudiantesService, que permitira obtener los estudiantes desde el backend. Iniciali-\n  zando los atributos: estudiantes, pageSizeOptions y errorConectarBacked. Tambien se inicializan los atributos de la\n  clase\n  */\n\n  constructor(private mostrarEstudiantesServ: MostrarEstudiantesService, private paginadorTraductorServ: PaginadorTraductorService,\n    private eliminarEstudianteServ: EliminarEstudianteService, private router: Router, private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) {\n    this.estudiantes = [];\n    this.pageSizeOptions = [5, 10, 15];\n    this.errorConectarBacked = false;\n    this.estudianteEliminado = false;    \n  }\n\n  // Al inicializar el componente se inicializan las columnas de la tabla y se mostraran los estudiantes\n\n  ngOnInit(): void {\n    this.inicializarColumnas();\n    this.inicializarEtiquetasPagiandor();\n    this.mostrarEstudiantes();\n  }\n\n/*\nEl siguiente permite inicializar las columas de la tabla, agregando la columna operaciones si el usuario autenticado no es\nvisualizador\n*/\n\n  inicializarColumnas(){\n    if(!this.esUsuarioVisualizador()){\n      this.columnas = ['Nombre', 'Apellidos', 'numeroIdentidad', 'Nota', 'numeroTelefono', 'operaciones'];\n    }\n    else{\n      this.columnas = ['Nombre', 'Apellidos', 'numeroIdentidad', 'Nota', 'numeroTelefono'];\n    }\n  }\n\n  // El siguiente metodo permite inicializar las etiquetas del pagiandor\n\n  inicializarEtiquetasPagiandor(){\n    this.paginadorTraductorServ.inicializarPagiandor(this.paginator)\n    this.paginadorTraductorServ.traductor('Primera página', 'Estudiantes por página', 'Última página', 'Página siguiente', 'Página anterior');\n  }\n\n  /*\n  El siguiente metodo permitira obtener y mostrar los estudiantes del backend, en caso de haber problemas con el backend\n  se mostrara un mensaje explicando la situacion\n  */\n\n  mostrarEstudiantes() {\n    this.mostrarEstudiantesServ.mostrarEstudiantes().subscribe(\n      (estudiantes) => {\n        this.inicializarDataSource(estudiantes);\n        this.inicializarPaginador();\n      },\n      () => {\n        this.setErrorConectarBacked();\n      }\n    );\n  }\n\n  /*\n  El siguiente metodo recibe como argumento una lista de estudiantes e inicializa el atributo dataSource a partir\n  de estos\n  */\n\n  inicializarDataSource(estudiantes) {\n    this.llenarListaEstudiantes(estudiantes);\n    this.dataSource = new MatTableDataSource<Estudiante>(this.estudiantes);\n  }\n\n  // El siguiente metodo retorna true si no hay estudiantes en dataSource, de lo contrario retorna false\n\n  noHayEstudiantes() {\n    return this.dataSource !== undefined && this.dataSource.data.length === 0;\n  }\n\n  setErrorConectarBacked() {\n    this.errorConectarBacked = true;\n  }\n\n  getErrorConectarBacked() {\n    return this.errorConectarBacked;\n  }\n\n  // El siguiente metodo permite inicializar el paginador\n\n  inicializarPaginador() {\n    this.dataSource.paginator = this.paginator;\n  }\n\n  /*\n  El siguiente metodo recibe como argumentos una lista de estudianes e icializa el atributo estudiantes a partir\n  de este argumento\n  */\n\n  llenarListaEstudiantes(estudiantes) {\n    this.estudiantes = [];\n    for (const estudiante of estudiantes) {\n      this.estudiantes.push(new Estudiante(estudiante));\n    }\n  }\n\n  /*\n  El siguiente metodo recibe como argumento el id de un estudiante. El metodo permite navegar hasta el formulario para\n  editar el estudiante poseedor del id pasado como argumento\n  */\n\n  editarEstudiante(idEstudiante) {\n    this.router.navigate([`editarStudent/${idEstudiante}`]);\n  }\n\n  /*\n  El siguiente metodo se ejecuta al eliminar un estudiante desde el backend. El metodo recibe como argumento el estudian-\n  te a eliminar. El metodo eliminara el estudiante y al hacer esto se mostrara un mensaje mostrando lo sucedido. Tambien\n  se actualizara la tabla de estudiantes. En caso de haber un error al eliminar el estudiante, se mostrara un mensaje mos-\n  trando lo sucedido\n  */\n\n  eliminarEstudiante(estudiante){        \n    this.eliminarEstudianteServ.eliminarEstudiante(estudiante).subscribe(\n      () => {\n        this.estudianteEliminadoMensaje();\n        this.mostrarEstudiantes();\n      },\n      () => {\n        this.mostrarMensajeErrorServidor();\n      }\n    ) \n  }  \n\n  /*\n  El siguiente metodo permite mostrar un mensaje diciendo que se ha eliminado el estudiante, el cual desaparecera a los 3\n  segundos\n  */\n\n  estudianteEliminadoMensaje() {\n    this.estudianteEliminado = true;\n    setTimeout(\n      () => this.estudianteEliminado = false,\n      3000\n    );\n  }\n\n  /*\n  El siguiente metodo permite que en la vista se muestre un mensaje de error cuando haya error al conectar con el backend,\n  este error ocurre cuando se hace click muy rapido en eliminar usuario\n  */\n\n  mostrarMensajeErrorServidor() {\n    this.errorConectarBacked = true;\n    setTimeout(\n      () => this.errorConectarBacked = false,\n      3000\n    );\n  }\n\n  // El siguiente metodo retorna true si el usuario autenticado tiene permiso de Visualizador, de lo contrario retorna false\n\n  esUsuarioVisualizador(){\n    return this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().esVisualizador();\n  }\n\n}\n","<!--A continuacion se muestra un mensaje cuando haya problemas al conectarse con el servidor-->\n\n<div *ngIf = \"getErrorConectarBacked()\" class = 'container margenSuperior'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Problema al conectarse con el servidor!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje que se muestra cuando no haya estudiantes en la bd-->\n\n<div *ngIf = \"noHayEstudiantes()\" class = 'container margenSuperior'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-warning' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡No hay un estudiantes insertados!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje al eliminar un estudiante-->\n\n<div *ngIf='estudianteEliminado' class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-6 offset-3\">\n            <div class=\"alert alert-success\" role=\"alert\">            \n                <h2 style='text-align: center' class=\"alert-heading\">¡Estudiante eliminado correctamente!</h2>             \n            </div>            \n        </div>\n    </div>\n</div>\n\n<!--Tabla que muestra los datos de los estudiantes-->\n\n<div class='margenSuperior'>\n    <h1 class=\"mat-display-1 encabezadoTabla\">Estudiantes</h1>\n</div>\n\n<div class='container'>\n    <div class=\"row\">\n        <div class=\"col-10 offset-1\">\n            <table mat-table [dataSource]='dataSource'>\n                <ng-container matColumnDef='Nombre'>\n                    <mat-header-cell *matHeaderCellDef='Nombre'>Nombre</mat-header-cell>\n                    <mat-cell *matCellDef='let estudiante'>{{estudiante.nombre}}</mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef='Apellidos'>\n                    <mat-header-cell *matHeaderCellDef='Apellidos'>Apellidos</mat-header-cell>\n                    <mat-cell *matCellDef='let estudiante'>{{estudiante.apellidos}}</mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef='numeroIdentidad'>\n                    <mat-header-cell *matHeaderCellDef='numeroIdentidad'>Número de identidad</mat-header-cell>\n                    <mat-cell *matCellDef='let estudiante'>{{estudiante.numeroIdentidad}}</mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef='Nota'>\n                    <mat-header-cell *matHeaderCellDef='Nota'>Nota</mat-header-cell>\n                    <mat-cell *matCellDef='let estudiante'>{{estudiante.nota}}</mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef='numeroTelefono'>\n                    <mat-header-cell *matHeaderCellDef='numeroTelefono'>Teléfono</mat-header-cell>\n                    <mat-cell *matCellDef='let estudiante'>{{estudiante.numeroTelefono}}</mat-cell>\n                </ng-container>\n\n<!--Las operaciones de editar y eliminar estudiantes solo se mostraran si el usuario autenticado no es visualizador-->                \n\n                <ng-container *ngIf='!esUsuarioVisualizador()' matColumnDef=\"operaciones\">\n                    <mat-header-cell *matHeaderCellDef>Operaciones</mat-header-cell>\n                    <mat-cell *matCellDef=\"let estudiante\">\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col px-0\">\n                                    <mat-icon class=\"mat-icon-button\" color='primary' (click)=\"editarEstudiante(estudiante.id)\">\n                                        {{'edit'}}\n                                    </mat-icon>\n                                </div>\n\n                                <div class=\"col px-0\">\n                                    <mat-icon class=\"mat-icon-button\" color='warn' (click)=\"eliminarEstudiante(estudiante)\">\n                                        {{'delete'}}\n                                    </mat-icon>\n                                </div>                                \n                            </div>\n                        </div>                            \n                    </mat-cell>\n                </ng-container>\n                             \n\n                <mat-header-row *matHeaderRowDef=\"columnas\"></mat-header-row>\n                <mat-row *matRowDef=\"let row; columns: columnas;\"></mat-row>\n            </table>           \n        </div>        \n    </div>\n\n    <!--Paginador-->\n\n    <div class=\"row\">\n        <div class=\"col-8 offset-2\">\n            <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" showFirstLastButtons></mat-paginator>\n        </div>           \n    </div>\n</div>     \n     ","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { UsuarioAutenticado } from '../Modelos/UsuarioAutenticado';\nimport { UsuarioAutenticadoOperacionesService } from \"../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\nimport { SalirSesionService } from \"../Servicios/SalirSesion/salir-sesion.service\";\nimport { Router } from '@angular/router';\nimport { NavbarPrincipalInterfaceService } from \"../Servicios/NavbarPrincipalInterface/navbar-principal-interface.service\";\n\n@Component({\n  selector: 'app-nav-bar',\n  templateUrl: './nav-bar.component.html',\n  styleUrls: ['./nav-bar.component.css']\n})\n\nexport class NavBarComponent implements OnInit {\n\n  // El siguiente atributo permitira que se muestre con un color activo la opcion que se escoja en el navbar\n\n  opcionSeleccionada;\n\n  usuarioAutenticado:UsuarioAutenticado;\n\n  // El siguiente atributo permite mostrar un mensaje de error cuando haya problemas de conexion con el backend\n\n  mensajeErrorServidor: boolean;\n\n  /*\n  El siguiente atributo permite suscribirnos a las emisiones realizadas desde PaginaPrincipalComponent, este atributo\n  nos ayudara a mostrar o no en el navbar, las opciones relativas a la pagina principal\n  */\n  \n  emisorPaginaPrincipal: Subject<boolean>;\n\n  // El siguiente atributo permitira mostrar o no las opciones relacionadas con la pagina principal\n\n  paginaPrincipalActiva: boolean;\n\n  /*\n  El siguiente atributo permitira que nos suscribamos a las opciones del navbar relacionados con la pagina principal.\n  Tambien permitira que emitamos un valor para indicar al navbar que el componente PaginaPrincipalComponent es el que\n  esta activo\n  */\n\n  obtenerOpciones: Subject<string>;  \n  \n  /*\n  En el siguiente constructor se inyecta el servicio UsuarioAutenticadoOperacionesService, para tener acceso al usuario\n  autenticado, tambien se inyecta UsuarioAutenticadoOperacionesService, para que el usuario autenticado salga de sesion,\n  se inyecta Router para poder navegar hacia la pagina principal. Tambien se inyectara NavbarPrincipalInterfaceService,\n  este servira de interface entre el componente NavBarComponent y PaginaPrincipalComponent. En el constructor se iniciali-\n  zaran los atributos: emisorPaginaPrincipal y obtenerOpciones.\n  */\n\n  constructor(    \n    private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService,\n    private salirSesionServ: SalirSesionService,\n    private router: Router,\n    private navbarPrincipalInterfaceService: NavbarPrincipalInterfaceService,\n    ) { \n      this.emisorPaginaPrincipal = this.navbarPrincipalInterfaceService.getEmisorPaginaPrincipal();\n      this.obtenerOpciones = this.navbarPrincipalInterfaceService.getEmisorOpciones();\n  } \n\n  /*\n  Al iniciar el componente nos suscribimos a las emisiones del PaginaPrincipalComponent, relativas a si este esta ac-\n  tivo o no\n  */\n\n  ngOnInit(): void {\n    this.suscripcionAEmisorPaginaPrincipal()\n  }\n\n  /* \n  El siguiente metodo permite que nos suscribamos a las emisiones de PaginaPrincipalComponent. Esto permitira mostrar o\n  no en el navbar, las opciones relacionadas con PaginaPrincipalComponent\n  */\n\n  suscripcionAEmisorPaginaPrincipal(){\n    this.emisorPaginaPrincipal.subscribe(\n      (paginaPrincipalActiva)=>{\n        this.paginaPrincipalActiva = paginaPrincipalActiva;  \n      }\n    )\n  }\n   \n  // El siguiente metodo permite escrollear hacia el elemento de la pagina principal, que es pasado como argumento  \n  \n  opcionPaginaPrincipal(opcion: string){\n    this.navbarPrincipalInterfaceService.emitirOpcion(opcion);\n  }\n\n  getPaginaPrincipalActiva(){\n    return this.paginaPrincipalActiva;\n  }\n\n  // Retorna si hay o no un usuario autenticado\n\n  hayUsuarioAutenticado(){\n    return this.usuarioAutenticadoOperacionesServ.hayUsuarioAutenticado();\n  }\n\n  /* \n  El siguiente metodo permite que un usuario salga de sesion. Primero se eliminara las credenciales del usuario del navega-\n  dor y luego se navegara hacia la pagina principal. En caso que haya errores al conectar con el servidor se mostrara un \n  mensaje de error\n  */\n\n  salirSesion(){  \n    this.salirSesionServ.salirSesion().subscribe(\n      () => {\n        this.usuarioAutenticadoOperacionesServ.eliminarUsuarioAutenticado();\n        this.navegarPaginaPrincipal();\n      },\n      () => {\n        this.mostrarMensajeErrorServidor();\n      }\n    )\n  }\n\n  getUsuarioAutenticado(){\n    return this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado();\n  }\n\n  // El siguiente metodo permitira navegar hacia la pagina principal\n\n  navegarPaginaPrincipal() {\n    this.router.navigate([`paginaPrincipal`]);\n  }\n\n  // El siguiente metodo permite que en la vista se muestre un mensaje de error cuando haya error al conectar con el backend\n\n  mostrarMensajeErrorServidor() {\n    this.mensajeErrorServidor = true;\n    setTimeout(\n      () => this.mensajeErrorServidor = false,\n      3000\n    );\n  }\n  \n/*\nLa siguiente es una funcion manejadora de eventos. Recibe como argumento una opcion clickeada en el navbar y actualiza\nel atributo opcionSeleccionada con este valor\n*/\n\n  seleccionarOpcion(opcion){\n    this.opcionSeleccionada = opcion;    \n  }\n  \n}\n\n\n","<!--\nEl siguiente codigo representa un navbar, en el cual se mostraran sus opciones dependiendo de si el usuario esta auten-\nticado y del rol que este interpreta\n-->\n\n<mat-toolbar color='primary' id='navbar'>\n\n    <div class='spacer'></div>    \n    <span *ngIf='hayUsuarioAutenticado()'>{{ getUsuarioAutenticado().getUsername()}}</span>\n    <a mat-button routerLink='paginaPrincipal' (click)=\"seleccionarOpcion('inicio')\" [color]=\"opcionSeleccionada == 'inicio' ? 'accent' : ''\">Inicio</a>\n    <ng-container *ngIf='hayUsuarioAutenticado()'>\n        <button id = 'estudiantes' mat-button [matMenuTriggerFor]=\"estudiantes\" [color]=\"opcionSeleccionada == 'estudiantes' ? 'accent' : ''\">Estudiantes</button>      \n        <mat-menu #estudiantes=\"matMenu\">\n            <button id='mostrarEstudiantes' (click)=\"seleccionarOpcion('estudiantes')\" mat-menu-item routerLink='mostrarEstudiantes'>Mostrar Estudiantes</button>\n            <button id='insertarEstudiantes' (click)=\"seleccionarOpcion('estudiantes')\" *ngIf='getUsuarioAutenticado().esGestor() || getUsuarioAutenticado().esGestorGeneral()' mat-menu-item routerLink='insertarEstudiante' routerLinkActive=\"active\">Insertar Estudiante</button>\n        </mat-menu>\n    </ng-container>\n\n    <ng-container *ngIf='hayUsuarioAutenticado() && (getUsuarioAutenticado().esGestorGeneral() || getUsuarioAutenticado().esGestor())'>\n        <button mat-button class='active' id='usuarios'[matMenuTriggerFor]=\"usuarios\" [color]=\"opcionSeleccionada == 'usuarios' ? 'accent' : ''\">Usuarios</button>       \n        <mat-menu #usuarios=\"matMenu\">\n            <button (click)=\"seleccionarOpcion('usuarios')\" id='mostrarUsuarios' mat-menu-item routerLink='mostrarUsuarios'>Mostrar Usuarios</button>\n            <button (click)=\"seleccionarOpcion('usuarios')\" id='insertarUsuarios' *ngIf='getUsuarioAutenticado().esGestorGeneral()' mat-menu-item routerLink='insertarUsuario'>Insertar Usuario</button>\n        </mat-menu>  \n    </ng-container>\n    <a *ngIf='getPaginaPrincipalActiva()' class='paginaInicial' mat-button (click)=\"opcionPaginaPrincipal('portfolio')\">Portfolio</a> \n    <a *ngIf='getPaginaPrincipalActiva()' class='paginaInicial' mat-button (click)=\"opcionPaginaPrincipal('about')\">About</a>\n    <a *ngIf='getPaginaPrincipalActiva()' class='paginaInicial' mat-button (click)=\"opcionPaginaPrincipal('team')\">Team</a>\n    <a *ngIf='!hayUsuarioAutenticado()' id='autenticar' mat-raised-button color='accent' routerLink='autenticacion'>Autenticar</a>\n    <a *ngIf='hayUsuarioAutenticado()' id='salir' mat-raised-button color='accent' (click)='salirSesion()'>Salir</a>    \n</mat-toolbar>\n\n<!--Mensaje de error que se muestra cuando no hay conexion con el backend-->\n\n<div *ngIf = \"mensajeErrorServidor\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Error al conectarse con el servidor!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n","import { ViewportScroller } from '@angular/common';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { NavbarPrincipalInterfaceService } from \"../Servicios/NavbarPrincipalInterface/navbar-principal-interface.service\";\nimport { Subject, Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-pagina-principal',\n  templateUrl: './pagina-principal.component.html',\n  styleUrls: ['./pagina-principal.component.css']\n})\n\nexport class PaginaPrincipalComponent implements OnInit, OnDestroy {\n\n  /*\n  El siguiente atributo permitira que nos suscribamos a las opciones del navbar relacionados con la pagina principal.\n  Tambien permitira que emitamos un valor para indicar al navbar que el componente PaginaPrincipalComponent es el que\n  esta activo\n  */\n\n  obtenerOpciones: Subject<string>;\n\n   \n  // El siguiente atributo almacenara la suscripcion a las opciones emitidas desde el navbar  \n\n  suscripcionAOpciones: Subscription;\n\n  /* \n  En el siguiente constructor se inyecta el Servicio ViewportScroller, el cual permitira scrollear la pagina. Tambien\n  se inyectara NavbarPrincipalInterfaceService, este servira de interface entre el componente NavBarComponent\n  y PaginaPrincipalComponent. En este constructor tambien se inicializa el atributo obtenerOpciones\n  */\n\n  constructor(\n    private viewportScroller: ViewportScroller,\n    private navbarPrincipalInterfaceService: NavbarPrincipalInterfaceService) {\n    this.obtenerOpciones = this.navbarPrincipalInterfaceService.getEmisorOpciones();\n  }\n\n  /*\n  Al iniciar el componente  nos suscribimos a las opciones emitidas desde el componente NavBarComponent. Tambien in-\n  dicamos a NavBarComponent que la pagina principal esta activa\n  */\n\n  ngOnInit(): void {\n    this.suscripcionOpciones();\n    this.paginaPrincipalActiva(true);\n  }  \n\n  /*\n  Al salir del componente indicamos a NavBarComponent que la pagina principal no esta activa. Tambien eliminamos la sus-\n  cripcion a las opciones del navbar\n  */\n\n  ngOnDestroy(): void {\n    this.paginaPrincipalActiva(false);    \n    this.suscripcionAOpciones.unsubscribe();\n  }\n\n  /* \n  El siguiente metodo permite suscribirnos a las opciones del navbar relacionadas con la pagina principal. Una vez obteni-\n  da la opcion, navegaremos hacia la parte de la pagina principal relacionada con la opcion.\n  */\n\n  suscripcionOpciones(){\n    this.suscripcionAOpciones = this.obtenerOpciones.subscribe(\n      (opcion: string)=>{    \n      this.viewportScroller.scrollToAnchor(opcion);\n     }\n    )\n  }\n\n  paginaPrincipalActiva(activa: boolean){\n    this.navbarPrincipalInterfaceService.emitirSiPaginaPrincipalActiva(activa);  \n  }  \n\n  // El siguiente metodo permite scrollear hacia el navbar\n\n  moverHaciaNavbar(){\n    this.navbarPrincipalInterfaceService.emitirOpcion('navbar');\n  }\n\n  getViewportScroller(){\n    return this.viewportScroller;\n  }\n\n}\n","  \n        <!-- Masthead-->\n        \n        <header class=\"masthead\">\n            <div class=\"container\">\n                <div class=\"masthead-subheading\">Secretaría de la Universidad</div>\n                <div class=\"masthead-heading text-uppercase\">Siempre creciendo</div>\n            </div>\n        </header> \n\n        <!-- Portfolio Grid-->\n        <section class=\"page-section bg-light\" id=\"portfolio\">\n            <div class=\"container\">\n                <div class=\"text-center\">\n                    <a (click)=\"moverHaciaNavbar()\" class=\"btn mx-2\" style='text-align:center'><svg width='5em' height='5em' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><g fill=\"#3f51b5\"><path fill-rule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-10.646.354a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 6.207V11a.5.5 0 0 1-1 0V6.207L5.354 8.354z\"/></g></svg></a>\n                    <h2 class=\"section-heading text-uppercase\">Portfolio</h2>\n                    <h3 class=\"section-subheading text-muted\">Lorem ipsum dolor sit amet consectetur.</h3>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-lg-4 col-sm-6 mb-4\">\n                        <div class=\"portfolio-item\">\n                            <a class=\"portfolio-link\" data-toggle=\"modal\" href=\"#portfolioModal1\">\n                                <div class=\"portfolio-hover\">\n                                    <div class=\"portfolio-hover-content\"><i class=\"fas fa-plus fa-3x\"></i></div>\n                                </div>\n                                <img class=\"img-fluid\" src=\"static/img/portfolio/01-thumbnail.jpg\" alt=\"\" />\n                            </a>\n                            <div class=\"portfolio-caption\">\n                                <div class=\"portfolio-caption-heading\">Threads</div>\n                                <div class=\"portfolio-caption-subheading text-muted\">Illustration</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4 col-sm-6 mb-4\">\n                        <div class=\"portfolio-item\">\n                            <a class=\"portfolio-link\" data-toggle=\"modal\" href=\"#portfolioModal2\">\n                                <div class=\"portfolio-hover\">\n                                    <div class=\"portfolio-hover-content\"><i class=\"fas fa-plus fa-3x\"></i></div>\n                                </div>\n                                <img class=\"img-fluid\" src=\"static/img/portfolio/02-thumbnail.jpg\" alt=\"\" />\n                            </a>\n                            <div class=\"portfolio-caption\">\n                                <div class=\"portfolio-caption-heading\">Explorer</div>\n                                <div class=\"portfolio-caption-subheading text-muted\">Graphic Design</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4 col-sm-6 mb-4\">\n                        <div class=\"portfolio-item\">\n                            <a class=\"portfolio-link\" data-toggle=\"modal\" href=\"#portfolioModal3\">\n                                <div class=\"portfolio-hover\">\n                                    <div class=\"portfolio-hover-content\"><i class=\"fas fa-plus fa-3x\"></i></div>\n                                </div>\n                                <img class=\"img-fluid\" src=\"static/img/portfolio/03-thumbnail.jpg\" alt=\"\" />\n                            </a>\n                            <div class=\"portfolio-caption\">\n                                <div class=\"portfolio-caption-heading\">Finish</div>\n                                <div class=\"portfolio-caption-subheading text-muted\">Identity</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4 col-sm-6 mb-4 mb-lg-0\">\n                        <div class=\"portfolio-item\">\n                            <a class=\"portfolio-link\" data-toggle=\"modal\" href=\"#portfolioModal4\">\n                                <div class=\"portfolio-hover\">\n                                    <div class=\"portfolio-hover-content\"><i class=\"fas fa-plus fa-3x\"></i></div>\n                                </div>\n                                <img class=\"img-fluid\" src=\"static/img/portfolio/04-thumbnail.jpg\" alt=\"\" />\n\n                            </a>\n                            <div class=\"portfolio-caption\">\n                                <div class=\"portfolio-caption-heading\">Lines</div>\n                                <div class=\"portfolio-caption-subheading text-muted\">Branding</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4 col-sm-6 mb-4 mb-sm-0\">\n                        <div class=\"portfolio-item\">\n                            <a class=\"portfolio-link\" data-toggle=\"modal\" href=\"#portfolioModal5\">\n                                <div class=\"portfolio-hover\">\n                                    <div class=\"portfolio-hover-content\"><i class=\"fas fa-plus fa-3x\"></i></div>\n                                </div>\n                                <img class=\"img-fluid\" src=\"static/img/portfolio/05-thumbnail.jpg\" alt=\"\" />\n                            </a>\n                            <div class=\"portfolio-caption\">\n                                <div class=\"portfolio-caption-heading\">Southwest</div>\n                                <div class=\"portfolio-caption-subheading text-muted\">Website Design</div>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4 col-sm-6\">\n                        <div class=\"portfolio-item\">\n                            <a class=\"portfolio-link\" data-toggle=\"modal\" href=\"#portfolioModal6\">\n                                <div class=\"portfolio-hover\">\n                                    <div class=\"portfolio-hover-content\"><i class=\"fas fa-plus fa-3x\"></i></div>\n                                </div>\n                                <img class=\"img-fluid\" src=\"static/img/portfolio/06-thumbnail.jpg\" alt=\"\" />\n                            </a>\n                            <div class=\"portfolio-caption\">\n                                <div class=\"portfolio-caption-heading\">Window</div>\n                                <div class=\"portfolio-caption-subheading text-muted\">Photography</div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>  \n\n        <!--Seccion About--> \n        \n        <section class=\"page-section\" id=\"about\">\n            <div class=\"container\">\n                <div class=\"text-center\">\n                    <a (click)=\"moverHaciaNavbar()\" class=\"btn mx-2\" style='text-align:center'><svg width='5em' height='5em' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><g fill=\"#3f51b5\"><path fill-rule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-10.646.354a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 6.207V11a.5.5 0 0 1-1 0V6.207L5.354 8.354z\"/></g></svg></a>\n                    <h2 class=\"section-heading text-uppercase\">About</h2>\n                    <h3 class=\"section-subheading text-muted\">Lorem ipsum dolor sit amet consectetur.</h3>\n                </div>\n                <ul class=\"timeline\">\n                    <li>\n                        <div class=\"timeline-image\"><img class=\"rounded-circle img-fluid\" src=\"static/img/about/1.jpg\" alt=\"\" /></div>\n                        <div class=\"timeline-panel\">\n                            <div class=\"timeline-heading\">\n                                <h4>2009-2011</h4>\n                                <h4 class=\"subheading\">Our Humble Beginnings</h4>\n                            </div>\n                            <div class=\"timeline-body\"><p class=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt ut voluptatum eius sapiente, totam reiciendis temporibus qui quibusdam, recusandae sit vero unde, sed, incidunt et ea quo dolore laudantium consectetur!</p></div>\n                        </div>\n                    </li>\n                    <li class=\"timeline-inverted\">\n                        <div class=\"timeline-image\"><img class=\"rounded-circle img-fluid\" src=\"static/img/about/2.jpg\" alt=\"\" /></div>\n                        <div class=\"timeline-panel\">\n                            <div class=\"timeline-heading\">\n                                <h4>March 2011</h4>\n                                <h4 class=\"subheading\">An Agency is Born</h4>\n                            </div>\n                            <div class=\"timeline-body\"><p class=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt ut voluptatum eius sapiente, totam reiciendis temporibus qui quibusdam, recusandae sit vero unde, sed, incidunt et ea quo dolore laudantium consectetur!</p></div>\n                        </div>\n                    </li>\n                    <li>\n                        <div class=\"timeline-image\"><img class=\"rounded-circle img-fluid\" src=\"static/img/about/3.jpg\" alt=\"\" /></div>\n                        <div class=\"timeline-panel\">\n                            <div class=\"timeline-heading\">\n                                <h4>December 2012</h4>\n                                <h4 class=\"subheading\">Transition to Full Service</h4>\n                            </div>\n                            <div class=\"timeline-body\"><p class=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt ut voluptatum eius sapiente, totam reiciendis temporibus qui quibusdam, recusandae sit vero unde, sed, incidunt et ea quo dolore laudantium consectetur!</p></div>\n                        </div>\n                    </li>\n                    <li class=\"timeline-inverted\">\n                        <div class=\"timeline-image\"><img class=\"rounded-circle img-fluid\" src=\"static/img/about/4.jpg\" alt=\"\" /></div>\n                        <div class=\"timeline-panel\">\n                            <div class=\"timeline-heading\">\n                                <h4>July 2014</h4>\n                                <h4 class=\"subheading\">Phase Two Expansion</h4>\n                            </div>\n                            <div class=\"timeline-body\"><p class=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sunt ut voluptatum eius sapiente, totam reiciendis temporibus qui quibusdam, recusandae sit vero unde, sed, incidunt et ea quo dolore laudantium consectetur!</p></div>\n                        </div>\n                    </li>\n                    <li class=\"timeline-inverted\">\n                        <div class=\"timeline-image\">\n                            <h4>\n                                Be Part\n                                <br />\n                                Of Our\n                                <br />\n                                Story!\n                            </h4>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n        </section>\n\n        <!-- Team-->\n\n        <section class=\"page-section bg-light\" id=\"team\">\n            <div class=\"container\">\n                <div class=\"text-center\">\n                    <a (click)=\"moverHaciaNavbar()\" class=\"btn mx-2\" style='text-align:center'><svg width='5em' height='5em' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><g fill=\"#3f51b5\"><path fill-rule=\"evenodd\" d=\"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-10.646.354a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 6.207V11a.5.5 0 0 1-1 0V6.207L5.354 8.354z\"/></g></svg></a>\n                    <h2 class=\"section-heading text-uppercase\">Our Team</h2>\n                    <h3 class=\"section-subheading text-muted\">Lorem ipsum dolor sit amet consectetur.</h3>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-lg-4\">\n                        <div class=\"team-member\">\n                            <img class=\"mx-auto rounded-circle\" src=\"static/img/team/1.jpg\" alt=\"\" />\n                            <h4>Kay Garland</h4>\n                            <p class=\"text-muted\">Lead Designer</p>\n                            <a class=\"btn mx-2\"><svg class='twitter' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><path d=\"M22.46 6c-.77.35-1.6.58-2.46.69c.88-.53 1.56-1.37 1.88-2.38c-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29c0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15c0 1.49.75 2.81 1.91 3.56c-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07a4.28 4.28 0 0 0 4 2.98a8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21C16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56c.84-.6 1.56-1.36 2.14-2.23z\" fill=\"#343a40\"/></svg></a>\n                            <a class=\"btn mx-2\"><svg class='facebook' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><path d=\"M12 2.04c-5.5 0-10 4.49-10 10.02c0 5 3.66 9.15 8.44 9.9v-7H7.9v-2.9h2.54V9.85c0-2.51 1.49-3.89 3.78-3.89c1.09 0 2.23.19 2.23.19v2.47h-1.26c-1.24 0-1.63.77-1.63 1.56v1.88h2.78l-.45 2.9h-2.33v7a10 10 0 0 0 8.44-9.9c0-5.53-4.5-10.02-10-10.02z\" fill=\"#343a40\"/></svg></a>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"team-member\">\n                            <img class=\"mx-auto rounded-circle\" src=\"static/img/team/2.jpg\" alt=\"\"/>\n                            <h4>Larry Parker</h4>\n                            <p class=\"text-muted\">Lead Marketer</p>\n                            <a class=\"btn mx-2\"><svg class='twitter' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><path d=\"M22.46 6c-.77.35-1.6.58-2.46.69c.88-.53 1.56-1.37 1.88-2.38c-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29c0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15c0 1.49.75 2.81 1.91 3.56c-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07a4.28 4.28 0 0 0 4 2.98a8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21C16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56c.84-.6 1.56-1.36 2.14-2.23z\" fill=\"#343a40\"/></svg></a>\n                            <a class=\"btn mx-2\"><svg class='facebook' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><path d=\"M12 2.04c-5.5 0-10 4.49-10 10.02c0 5 3.66 9.15 8.44 9.9v-7H7.9v-2.9h2.54V9.85c0-2.51 1.49-3.89 3.78-3.89c1.09 0 2.23.19 2.23.19v2.47h-1.26c-1.24 0-1.63.77-1.63 1.56v1.88h2.78l-.45 2.9h-2.33v7a10 10 0 0 0 8.44-9.9c0-5.53-4.5-10.02-10-10.02z\" fill=\"#343a40\"/></svg></a>\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <div class=\"team-member\">\n                            <img class=\"mx-auto rounded-circle\" src=\"static/img/team/3.jpg\" alt=\"\"/>\n                            <h4>Diana Petersen</h4>\n                            <p class=\"text-muted\">Lead Developer</p>\n                            <a class=\"btn mx-2\"><svg class='twitter' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><path d=\"M22.46 6c-.77.35-1.6.58-2.46.69c.88-.53 1.56-1.37 1.88-2.38c-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29c0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15c0 1.49.75 2.81 1.91 3.56c-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07a4.28 4.28 0 0 0 4 2.98a8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21C16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56c.84-.6 1.56-1.36 2.14-2.23z\" fill=\"#343a40\"/></svg></a>\n                            <a class=\"btn mx-2\"><svg class='facebook' preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 24 24\"><path d=\"M12 2.04c-5.5 0-10 4.49-10 10.02c0 5 3.66 9.15 8.44 9.9v-7H7.9v-2.9h2.54V9.85c0-2.51 1.49-3.89 3.78-3.89c1.09 0 2.23.19 2.23.19v2.47h-1.26c-1.24 0-1.63.77-1.63 1.56v1.88h2.78l-.45 2.9h-2.33v7a10 10 0 0 0 8.44-9.9c0-5.53-4.5-10.02-10-10.02z\" fill=\"#343a40\"/></svg></a>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"col-lg-8 mx-auto text-center\"><p class=\"large text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aut eaque, laboriosam veritatis, quos non quis ad perspiciatis, totam corporis ea, alias ut unde.</p></div>\n                </div>\n            </div>\n        </section>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, AbstractControl } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { ObtenerUsuarioService } from \"../../Servicios/ObtenerUsuario/obtener-usuario.service\";\nimport { Usuario } from 'src/app/Modelos/Usuario';\nimport { UsuarioEstandar } from 'src/app/Modelos/UsuarioEstandar';\nimport { Permiso } from 'src/app/Modelos/Permiso';\nimport { EditarUsuarioService } from 'src/app/Servicios/EditarUsuario/editar-usuario.service';\nimport { ValidarCampoUsuario } from 'src/app/Modelos/ValidarCampoUsuario';\nimport { ObtenerPermisosService } from 'src/app/Servicios/Permisos/obtener-permisos.service';\nimport { merge } from 'rxjs';\nimport { CrearUsuarioParaEdicion } from 'src/app/Modelos/CrearUsuarioParaEdicion';\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\nimport { Router } from '@angular/router';\nimport { UsuarioAutenticado } from 'src/app/Modelos/UsuarioAutenticado';\n\n@Component({\n  selector: 'app-editar-usuario',\n  templateUrl: './editar-usuario.component.html',\n  styleUrls: ['./editar-usuario.component.css']\n})\n\n// La siguiente clase permite editar un usuario\n\nexport class EditarUsuarioComponent implements OnInit { \n  \n  // El siguiente objeto permite validar el campo permiso del formulario\n\n  validarCampoUsuario: ValidarCampoUsuario;\n\n  // El siguiente atributo almacenara los valores de los campos por defecto del formulario\n\n  camposFormulario: any;\n\n  // id del estudiante\n\n  idUsuario: string;\n\n  // El siguiente atributo almacenara los permisos de los usuarios\n\n  permisos: Permiso[];\n\n  // El siguiente atributo permitira mostrar el formulario cuando se hayan obtenido los permisos del backend\n\n  permisosObtenidos: boolean;\n\n  // Definiento formulario con sus campos\n\n  form: FormGroup;\n  username: AbstractControl;\n  password: AbstractControl;\n  permiso: AbstractControl;\n\n  // El siguiente atributo permite mostrar el formulario al obtener el estudiante a editar\n\n  usuarioObtenido: boolean;\n\n  // El siguiente atributo permite mostrar un mensaje de error cuando haya problemas de conexion con el backend\n\n  mensajeErrorServidor: boolean;\n\n  // El siguiente atributo permite mostrar un mensaje en el formulario al editar un usuario con el username repetido  \n\n  errorUsernameRepetido: boolean;\n\n  // El siguiente atributo permite mostrar un mensaje al editar un usuario con el username repetido\n\n  errorMensajeUsernameRepetido: boolean;\n\n  // El siguiente atributo se emplea para mostrar mensaje de error cuando no se pueda conectar con el backend\n\n  errorMensajeBackend: boolean;\n\n  // El siguiente atributo describe si hubo un error al acceder al backend\n\n  errorServidor: boolean;\n\n  // El siguienta atributo almacenara el username repetido\n\n  usernameRepetido: string;\n\n  // Este atributo permite mostrar un mensaje cuando se edite un usuario\n\n  usuarioEditado: boolean;\n\n  // Representa la informacion de un usuario;\n\n  usuario: Usuario;\n\n  /*\n  En el siguiente constructor se inyecta el servicio para obtener el usuario a editar, el servicio para obtener todos los\n  permisos posibles de un usuario, un servicio para obtener el id de un usuario del Backend, un servicio para crear for-\n  mularios y el servicio para editar usuario. Tambien se inicializa atributos de la clase\n  */\n\n  constructor(\n    private obtenerUsuarioServ: ObtenerUsuarioService,\n    private obtenerPermisosServ: ObtenerPermisosService,\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    private editarUsuarioServ: EditarUsuarioService,\n    private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService,\n    private router: Router\n  )\n  {\n    this.validarCampoUsuario = new ValidarCampoUsuario();\n    this.permisosObtenidos = false;\n    this.errorServidor = false;\n    this.permisos = [];\n  }\n\n  // Al iniciar el componente se inicializa el atributo idUsuario\n\n  ngOnInit(): void {\n    this.inicializarIdUsuario();\n  }\n  \n  // El siguiente metodo permite inicializar el atributo idUsuario con el valor de la url  \n\n  inicializarIdUsuario(){\n    this.route.params.subscribe(      \n      (params) => {\n        this.idUsuario = params.id;        \n        this.unificarInformacion();    \n      })      \n  }\n\n  /*\n  El siguiente metodo permite mostrar el formulario en el template. Este formulario solo se mostrara cuando se obtenga\n  el usuario a editar y todos los permisos que existen, desde el backend\n  */\n\n  unificarInformacion(){\n    let usuario = this.obtenerUsuarioServ.obtenerUsuario(this.idUsuario);    \n    let permisos = this.obtenerPermisosServ.obtenerPermisos();    \n    const merged = merge(usuario, permisos);       \n    merged.subscribe(\n      (resp) => {\n        if(Array.isArray(resp)){          \n          this.inicializarPermisos(resp);\n        }\n        else{\n          this.mostrarFormulario(resp);\n          this.detectarCambiosUsername();\n        }\n      },\n      ()=>{\n        this.setErrorServidor();\n        this.mostrarMensajeErrorServidor();\n      },\n      ()=>{ \n        if(!this.errorServidor){\n          this.setUsuarioObtenido(true);\n          this.setPermisosObtenidos(true);\n        }        \n      }      \n    );\n  }\n  \n  /*\n  Este metodo recibe como argumento una lista de permisos. El metodo inicializa el atributo permisos con los permisos\n  obtenidos del backend\n  */\n\n  inicializarPermisos(permisos: any[]){\n    for (let index = 0; index < permisos.length; index++) {\n      this.permisos.push(new Permiso(permisos[index].pk, permisos[index].name));      \n    }\n  }\n\n  // El siguiente metodo permite mostrar el formulario para editar al usuario\n\n  mostrarFormulario(usuario) {\n    this.inicializarUsuario(usuario);\n    this.inicializarCamposFormulario();\n    this.reset();    \n  } \n\n  /*\n  El siguiente medodo permite que cuando haya un username repetido, al cambiar este en el campo de texto, no\n  se muestre el error en el campo de texto\n  */\n\n  detectarCambiosUsername(): void {\n    this.username.valueChanges\n    .subscribe(\n      (next) => {\n        if (this.errorUsernameRepetido && this.usernameRepetido !== next) {\n          this.errorUsernameRepetido = false;\n        }\n      }\n    );\n  }  \n\n  setPermisosObtenidos(permisosObtenidos: boolean){\n    this.permisosObtenidos = permisosObtenidos;\n  }\n\n  setUsuarioObtenido(usuarioObtenido) {\n    this.usuarioObtenido = usuarioObtenido;\n  }\n  \n  /*\n  El siguiente metodo recibe como argumento un objeto con informacion de un usuario e inicializa el\n  atributo: usuario\n  */\n\n  inicializarUsuario(usuario) {\n    this.usuario = new Usuario(usuario);    \n  }\n\n  // El siguiente metodo permite inicializar el atributo camposFormulario\n\n  inicializarCamposFormulario() {\n    this.camposFormulario = {\n      username: [this.usuario.username, Validators.required],\n      password: [''],\n      permiso: [this.usuario.permiso.name,  Validators.compose([this.validarCampoUsuario.getValidarPermiso()])]      \n    };\n  }  \n\n  // El siguiente metodo permite resetear el formulario\n\n  reset() {\n    this.form = this.fb.group(this.camposFormulario);\n    this.username = this.form.controls.username;\n    this.password = this.form.controls.password;\n    this.permiso = this.form.controls.permiso;\n  }\n  \n  /*\n  El siguiente metodo recibe como argumento el usuario del formulario a editar. El metodo permitira editar el usuario en\n  el backend. Si el usuario autenticado es el que se esta editanto y se cambia su permiso, se actualizaran las credencia-\n  les del usuario autenticado y se navegara hacia la pagina principal. En caso de error de tipo username repetido o error\n  al conectar con servidor, se mostraran los mensajes indicandolos\n  */\n\n  submit(userData): void {    \n    userData = this.prepararUsuarioParaEdicion(userData);\n    this.editarUsuarioServ.editarUsuario(userData)\n    .subscribe(\n      (usuario: any) => {                \n        let crearUsuarioParaEdicion = new CrearUsuarioParaEdicion(usuario, this.permisos);\n        let user = crearUsuarioParaEdicion.getUsuarioParaEdicion();\n        if(this.cambioUsuarioAutenticadoPermiso(user)){\n          this.navegarPaginaPrincipal();\n          this.actualizarUsuarioAutenticado(user);        \n        }\n        else{\n          this.mostrarFormulario(user);\n          this.usuarioEditadoCorrectamente();\n        }\n      },\n      (error: any) => {\n      if (error.status === 0) {\n          this.mostrarMensajeErrorServidor();\n        } else {\n          this.setUsernameRepetido(userData.username);\n          this.setErrorUsernameRepetido(true);\n          this.mostrarMensajeErrorEditarUsuario();\n        }\n      }\n    );\n  }\n\n  /*\n  El siguiente metodo recibe como argumento un usuario subido por el formulario. Este metodo formatea este usuario al\n  estandar para edicion en el backend\n  */\n\n  prepararUsuarioParaEdicion(user){\n    let usuario = this.agregarPk(user);\n    usuario = this.comprobarPasswordVacio(usuario)\n    let usuarioEstandar = new UsuarioEstandar(this.permisos, usuario);\n    usuario = usuarioEstandar.getUsuario();\n    return usuario\n  }\n\n/*\nEl siguiente metodo recibe como argumento el usuario editado. El metodo retorna true se el usuario autenticado el el mis-\nmo que el editado, de lo contrario retorna false\n*/\n  \n  esUsuarioElAutenticado(user): boolean{\n    const usuarioAEditar = user.username;\n    const usuarioAutenticado = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getUsername();\n    return usuarioAEditar === usuarioAutenticado;\n  }\n\n  /*\n  El siguiente metodo recibe como argumento el usuario ya editado. El metodo retorna true si este tiene el permiso de\n  Gestion General, si no retorna false\n  */\n\n  tieneUsuarioPermisoGestionGeneral(user){\n    return user.user_permissions[0].name === 'Gestion General';\n  }\n\n  /* \n  El siguiente metodo recibe como argumento un usuario en el formato que se emplea para editar usuarios en el formulario.\n  El metodo permitira actualizar el usuario autenticado en el sistema con las credenciales del usuario pasado como argumento\n  */\n\n  actualizarUsuarioAutenticado(user){\n    user.permiso = user.user_permissions[0].name;\n    delete user.user_permissions;\n    user.token = this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getToken();\n    let usuario = new UsuarioAutenticado(user);\n    this.usuarioAutenticadoOperacionesServ.setUsuarioAutenticado(usuario);\n  }\n\n  /*\n  El siguiente metodo recibe como argumento el usuario ya editado. El metodo retorna true si el usuario autenticado es el\n  usuario que se esta editando y ademas no tiene permiso de Gestion General, de lo contrario retorna false\n  */\n\n  cambioUsuarioAutenticadoPermiso(user){\n    return this.esUsuarioElAutenticado(user) && !this.tieneUsuarioPermisoGestionGeneral(user);    \n  }\n\n  // El siguiente metodo permitira navegar hacia la pagina principal\n\n  navegarPaginaPrincipal() {\n    this.router.navigate([`paginaPrincipal`]);\n  }\n\n  // El siguiente metodo permite agregar al usuario del formulario el pk del usuario obtenido del backend \n\n  agregarPk(user){\n    user.pk = this.usuario.pk\n    return user;\n  }\n\n  /*\n  El siguiente metodo permite mostrar un mensaje diciendo que se ha editado el usuario, el cual desaparecera a los 3\n  segundos\n  */\n\n  usuarioEditadoCorrectamente() {\n    this.usuarioEditado = true;\n    setTimeout(\n      () => this.usuarioEditado = false,\n      3000\n    );\n  }\n\n  /*\n  El siguiente metodo recibe un usuario subido al formulario. El metodo retorna a este usuario, si el atributo\n  password esta vacio, devuelve el usuario sin este atributo\n  */\n\n  comprobarPasswordVacio(user){\n    if(user.password === ''){\n      delete user.password\n    }\n    return user\n  } \n\n  // El siguiente metodo permite que en la vista se muestre un mensaje de error cuando haya error al conectar con el backend\n\n  mostrarMensajeErrorServidor() {\n    this.mensajeErrorServidor = true;\n    setTimeout(\n      () => this.mensajeErrorServidor = false,\n      3000\n    );\n  }\n\n  setErrorServidor() {\n    this.errorServidor = true;    \n  }\n\n  setUsernameRepetido(usernameRepetido: string){\n    this.usernameRepetido = usernameRepetido;\n  }\n\n  setErrorUsernameRepetido(errorUsernameRepetido: boolean){\n    this.errorUsernameRepetido = errorUsernameRepetido;\n  }  \n  \n  mostrarMensajeErrorEditarUsuario() {\n    this.errorMensajeUsernameRepetido = true;\n    setTimeout(\n      () => this.errorMensajeUsernameRepetido = false,\n      3000\n    );\n  }\n\n}\n","<!--breadcrumb para navegar hacia mostrar usuarios-->\n\n<nav aria-label=\"breadcrumb\">\n  <ol class=\"breadcrumb\">\n    <li class=\"breadcrumb-item\"><a routerLink='/mostrarUsuarios'>Mostrar usuarios</a></li>\n    <li class=\"breadcrumb-item active\" aria-current=\"page\">Editar usuarios</li>\n  </ol>\n</nav>\n\n<!--Mensaje de error que se muestra cuando no hay conexion con el backend-->\n\n<div *ngIf = \"mensajeErrorServidor\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Error al conectarse con el servidor!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje de error que se muestra cuando se intenta insertar un usuario con un username existente-->\n\n<div *ngIf = \"errorMensajeUsernameRepetido\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Ya existe un usuario con ese username!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje al editar un usuario-->\n\n<div *ngIf='usuarioEditado' class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-6 offset-3\">\n            <div class=\"alert alert-success\" role=\"alert\">            \n                <h2 style='text-align: center' class=\"alert-heading\">¡Usuario editado correctamente!</h2>             \n            </div>            \n        </div>\n    </div>\n</div>\n\n<!--Formulario para editar usuarios-->\n\n<div *ngIf='permisosObtenidos && usuarioObtenido' class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-4 offset-4\">\n            <div class=\"card bg-light mb-4\">\n                <div class=\"card-header\"><h1 class='cabeceraFormulario'>Editar Usuario</h1></div>\n                <div class=\"card-body\">              \n                    <form [formGroup]=\"form\" (ngSubmit) = \"submit(form.value)\">    \n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <input type=\"text\" class=\"form-control\" id='username' [formControl]=\"username\" placeholder=\"username\" [class.border-danger]='(!username.valid && username.touched) || errorUsernameRepetido' aria-describedby='usernameError'>            \n                                <small *ngIf='(username.touched && !username.valid) || errorUsernameRepetido' id='usernameError' class='form-text text-muted'>\n                                    Username incorrecto\n                                </small>\n                            </div>                                \n                        </div>\n\n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">                          \n                                <input type=\"password\" class=\"form-control\" [formControl]=\"password\" id='password' placeholder=\"password\">       \n                                                              \n                            </div> \n                        </div>\n\n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <label for=\"permiso\">Permiso</label>                                        \n                                <select class=\"form-control\" [formControl]=\"permiso\" id=\"permiso\" [class.border-danger]='permiso.touched && !permiso.valid' aria-describedby='permisoError'>\n                                    <option>Visualizador</option>\n                                    <option>Gestion</option>\n                                    <option>Gestion General</option>                                    \n                                </select>\n                                <small *ngIf='permiso.touched && !permiso.valid' id='permisoError'>\n                                    valor de permiso incorrecto\n                                </small>                            \n                            </div>\n                        </div>\n\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col-4 offset-4 px-0\">                                    \n                                    <button type=\"submit\" [disabled] = \"!form.valid\" id='aceptar' class=\"btn btn-primary\">Aceptar</button>                                                                                                        \n                                </div>\n                                <div class=\"col-4 px-0\">                                                                              \n                                    <button type=\"button\" class=\"btn btn-secondary\" (click)='reset()'>Cancelar</button>                                    \n                                </div>                      \n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, AbstractControl, Validators} from '@angular/forms';\nimport { InsertarUsuarioService } from '../../Servicios/InsertarUsuario/insertar-usuario.service';\nimport { ObtenerPermisosService } from '../../Servicios/Permisos/obtener-permisos.service';\nimport { Permiso } from \"../../Modelos/Permiso\";\nimport { UsuarioEstandar } from \"../../Modelos/UsuarioEstandar\";\nimport { ValidarCampoUsuario } from \"../../Modelos/ValidarCampoUsuario\";\n\n\n\n@Component({\n  selector: 'app-insertar-usuario',\n  templateUrl: './insertar-usuario.component.html',\n  styleUrls: ['./insertar-usuario.component.css']\n})\n\n// La siguiente clase va a permitir insertar Estudiantes\n\nexport class InsertarUsuarioComponent implements OnInit {\n\n  // Definiento formulario con sus campos\n\n  form: FormGroup;\n  username: AbstractControl;\n  password: AbstractControl;\n  permiso: AbstractControl;\n\n  // El siguiente atributo almacenara los valores de los campos por defecto del formulario\n\n  camposFormulario: any;\n\n  // El siguiente atributo se emplea para mostrar mensaje de error al insertar un username ya existente\n\n  errorMensajeUsernameRepetido: boolean;\n  \n  // El siguiente atributo permite mostrar un mensaje en el formulario al insertar un usuario con el username repetido  \n\n  errorUsernameRepetido: boolean;\n\n  // El siguiente atributo permitira mostrar un mensaje cuando se inserte un usuario\n\n  usuarioInsertado: boolean;\n\n  // El siguiente atributo permite mostrar un mensaje de error cuando haya problemas de conexion con el backend\n\n  mensajeErrorServidor: boolean;\n\n  // El siguienta atributo almacenara el numero de identidad repetido\n\n  usernameRepetido: string;\n\n  // El siguiente atributo almacenara los permisos de los usuarios\n\n  permisos: Permiso[];\n\n  // El siguiente atributo permitira mostrar el formulario cuando se hayan obtenido los permisos del backend\n\n  permisosObtenidos: boolean;\n\n  // El siguiente objeto permite validar el campo permiso del formulario\n\n  validarCampoUsuario: ValidarCampoUsuario;\n\n  /*\n  En el siguiene constructor inicializamos el formulario y sus campos e inyectamos la dependencia: FormBuilder y\n  InsertarUsuarioServ. Tambien icicializamos atributos de la clase\n  */\n\n  constructor(\n    private fb: FormBuilder,\n    private InsertarUsuarioServ: InsertarUsuarioService,\n    private obtenerPermisosServ: ObtenerPermisosService) {\n    this.errorMensajeUsernameRepetido = false;\n    this.errorUsernameRepetido = false;\n    this.usuarioInsertado = false;\n    this.mensajeErrorServidor = false;\n    this.usernameRepetido = '';\n    this.permisos = [];\n    this.permisosObtenidos = false;\n    this.validarCampoUsuario = new ValidarCampoUsuario();\n    this.inicializarCamposFormulario();\n    this.reset();\n    this.detectarCambiosUsername();\n  }\n\n  // Al iniciar el componente se obtienen los permisos de usuario del backend\n\n  ngOnInit(): void {\n    this.obtenerPermisos()\n  }\n\n  /*\n  El siguiente metodo permite obtener los permisos de usuario del backend. En caso de haber un error al conectarse con el\n  backend permitira mostrar un mensaje de error.\n  */\n\n  obtenerPermisos(){\n    this.obtenerPermisosServ.obtenerPermisos().subscribe(\n      (permisos) => {\n        this.inicializarPermisos(permisos);\n        this.setPermisosObtenidos(true);\n      },\n      () => {\n        this.mostrarMensajeErrorServidor()\n      }\n    )\n  }\n\n  setPermisosObtenidos(permisosObtenidos: boolean){\n    this.permisosObtenidos = permisosObtenidos;\n  }\n\n  /*\n  Este metodo recibe como argumento una lista de permisos. El metodo inicializa el atributo permisos con los permisos\n  obtenidos del backend\n  */\n\n  inicializarPermisos(permisos: any[]){\n    for (let index = 0; index < permisos.length; index++) {\n      this.permisos.push(new Permiso(permisos[index].pk, permisos[index].name));      \n    }   \n  }\n\n  // El siguiente metodo permite inicializar el atributo camposFormulario\n\n  inicializarCamposFormulario() {\n    this.camposFormulario = {\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n      permiso: ['Permiso', Validators.compose([this.validarCampoUsuario.getValidarPermiso()])],\n    };\n  }\n\n  // El siguiente metodo permite resetear el formulario\n\n  reset() {\n    this.form = this.fb.group(this.camposFormulario);\n    this.username = this.form.controls.username;\n    this.password = this.form.controls.password;\n    this.permiso = this.form.controls.permiso;   \n  }\n\n  /*\n  El siguiente medodo permite que cuando haya un username repetido, al cambiar este en el campo de texto, no\n  se muestre el error en el campo de texto\n  */\n\n  detectarCambiosUsername(): void {\n    this.username.valueChanges\n    .subscribe(\n      (next) => {\n        if (this.errorUsernameRepetido && this.usernameRepetido !== next) {\n          this.errorUsernameRepetido = false;\n        }\n      }\n    );\n  }\n\n  /*\n  El siguiente metodo recibe como argumento un objeto que representa los datos de un usuario insertados en el formulario.\n  El metodo convierte estos datos en el formato aceptado en el backend. El metodo insertara el usuario en la bd, en caso de\n  haber error al conectarse con el backend mostrara un mensaje de error. Tambien se mostrara un mensaje de error al inten-\n  tar insertar un usuario con username que ya exista\n  */\n\n  submit(user): void {    \n    const usuarioEstandar = new UsuarioEstandar(this.permisos, user);\n    const usuario = usuarioEstandar.getUsuario();\n    this.InsertarUsuarioServ.insertarUsuario(usuario)\n    .subscribe(\n    (resp: any) => {\n      this.reset();\n      this.usuarioInsertadoCorrectamente();\n    },\n    (error: any) => {\n      if (error.status === 0) {\n        this.mostrarMensajeErrorServidor();\n      } else {\n        this.setUsernameRepetido(usuario.username);\n        this.setErrorUsernameRepetido(true);\n        this.mostrarMensajeErrorInsertarUsuario();\n      }\n    }\n    );\n  }  \n\n  // El siguiente metodo permite que en la vista se muestre un mensaje de error cuando haya error al conectar con el backend\n\n  mostrarMensajeErrorServidor() {\n    this.mensajeErrorServidor = true;    \n  }\n\n  // El siguiente metodo permite que en la vista se muestre un mensaje de error al intentar insertar un username existente\n\n  mostrarMensajeErrorInsertarUsuario() {\n    this.errorMensajeUsernameRepetido = true;\n    setTimeout(\n      () => this.errorMensajeUsernameRepetido = false,\n      3000\n    );\n  }\n\n  setErrorUsernameRepetido(errorUsernameRepetido: boolean){\n    this.errorUsernameRepetido = errorUsernameRepetido;\n  }\n\n  setUsernameRepetido(usernameRepetido){\n    this.usernameRepetido = usernameRepetido;\n  }\n\n  /*\n  El siguiente metodo permite mostrar un mensaje diciendo que se ha insertado el usuario, el cual desaparecera a los 3\n  segundos\n  */\n\n usuarioInsertadoCorrectamente() {\n  this.usuarioInsertado = true;\n  setTimeout(\n    () => this.usuarioInsertado = false,\n    3000\n  );\n}\n\n}\n","<!--Mensaje de error que se muestra cuando no hay conexion con el backend-->\n\n<div *ngIf = \"mensajeErrorServidor\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Error al conectarse con el servidor!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje de error que se muestra cuando se intenta insertar un usuario con un username existente-->\n\n<div *ngIf = \"errorMensajeUsernameRepetido\" class = 'container'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Ya existe un usuario con ese username!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje al insertar un usuario-->\n\n<div *ngIf='usuarioInsertado' class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-6 offset-3\">\n            <div class=\"alert alert-success\" role=\"alert\">            \n                <h2 style='text-align: center' class=\"alert-heading\">Usuario insertado correctamente!</h2>             \n            </div>            \n        </div>\n    </div>\n</div>\n\n<!--Formulario para insertar usuarios-->\n\n<div *ngIf='permisosObtenidos' class=\"container margenSuperior\">\n    <div class=\"row\">\n        <div class=\"col-4 offset-4\">\n            <div class=\"card bg-light mb-4\">\n                <div class=\"card-header\"><h1 class='cabeceraFormulario'>Insertar Usuario</h1></div>\n                <div class=\"card-body\">              \n                    <form [formGroup]=\"form\" (ngSubmit) = \"submit(form.value)\">    \n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <input type=\"text\" class=\"form-control\" id='username' [formControl]=\"username\" placeholder=\"username\" [class.border-danger]='(!username.valid && username.touched) || errorUsernameRepetido' aria-describedby='usernameError'>            \n                                <small *ngIf='(username.touched && !username.valid) || errorUsernameRepetido' id='usernameError' class='form-text text-muted'>\n                                    Username incorrecto\n                                </small>\n                            </div>                                \n                        </div>\n\n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">                          \n                                <input type=\"password\" class=\"form-control\" [formControl]=\"password\" id='password' placeholder=\"password\" [class.border-danger]='password.touched && !password.valid' aria-describedby='passwordError'>            \n                                <small *ngIf='password.touched && !password.valid' id='passwordError' class='form-text text-muted'>\n                                    Password incorrecto\n                                </small>                               \n                            </div> \n                        </div>\n\n                        <div class=\"form-row\">\n                            <div class=\"form-group col\">\n                                <label for=\"permiso\">Permiso</label>                                        \n                                <select class=\"form-control\" [formControl]=\"permiso\" id=\"permiso\" [class.border-danger]='permiso.touched && !permiso.valid' aria-describedby='permisoError'>\n                                    <option>Permiso</option>\n                                    <option>Visualizador</option>\n                                    <option>Gestion</option>\n                                    <option>Gestion General</option>                                    \n                                </select>\n                                <small *ngIf='permiso.touched && !permiso.valid' id='permisoError'>\n                                    valor de permiso incorrecto\n                                </small>                            \n                            </div>\n                        </div>\n\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col-4 offset-4 px-0\">                                    \n                                    <button type=\"submit\" [disabled] = \"!form.valid\" id='aceptar' class=\"btn btn-primary\">Aceptar</button>                                                                                                        \n                                </div>\n                                <div class=\"col-4 px-0\">                                                                              \n                                    <button type=\"button\" class=\"btn btn-secondary\" (click)='reset()'>Cancelar</button>                                    \n                                </div>                      \n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MostrarUsuariosService } from '../../Servicios/MostrarUsuarios/mostrar-usuarios.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator} from '@angular/material/paginator';\nimport { Usuario } from 'src/app/Modelos/Usuario';\nimport { Router } from '@angular/router';\nimport { PaginadorTraductorService } from \"../../Servicios/PaginadorTraductor/paginador-traductor.service\";\nimport { EliminarUsuarioService } from \"../../Servicios/EliminarUsuario/eliminar-usuario.service\";\nimport { UsuarioAutenticadoOperacionesService } from \"../../Servicios/UsuarioAutenticadoOperaciones/usuario-autenticado-operaciones.service\";\n\n@Component({\n  selector: 'app-mostrar-usuarios',\n  templateUrl: './mostrar-usuarios.component.html',\n  styleUrls: ['./mostrar-usuarios.component.css']\n})\n\n// La siguiente clase permite mostrar los usuarios en una tabla\n\nexport class MostrarUsuariosComponent implements OnInit {\n\n  // Nombre de las columnas de la tabla\n\n  columnas: string[] = ['Username', 'Permiso', 'Operaciones'];\n\n  // Lista de usuarios\n\n  usuarios: Usuario[];\n\n  // Objeto que permitira mostrar los usuarios en la tabla y el paginador\n\n  dataSource: MatTableDataSource<Usuario>;\n\n  // Cantidad de estudiante que se pueden mostrar por pagina\n\n  pageSizeOptions: number[];\n\n  // Atributo para mostrar o no mensaje de error\n\n  errorConectarBacked: boolean;\n\n  // Paginador\n\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  // El siguiente atributo permitira mostrar un mensaje al eliminar un usuario\n\n  usuarioEliminado: boolean;\n\n  /*\n  En el siguiente constructor se inyectan los servicios para mostrar usuarios, eliminar un usuario, inicializar las eti-\n  quetas de un pagiandor y un router para navegar hacia el componente EditarUsuarios. Tambien se inicializa atributos de\n  la clase. Se inyecta UsuarioAutenticadoOperacionesService para obtener las credenciales del usuario autenticado. Tam-\n  bien las columnas de la tabla se inicializaran de acuerdo a si el usuario autenticado tiene permiso de Gesion General\n  o no\n  */\n\n  constructor(private MostrarUsuariosServ: MostrarUsuariosService, private eliminarUsuarioServ: EliminarUsuarioService,\n    private paginadorTraductorServ: PaginadorTraductorService, private router: Router,\n    private usuarioAutenticadoOperacionesServ: UsuarioAutenticadoOperacionesService) {\n    this.usuarios = [];\n    this.pageSizeOptions = [5, 10, 15];\n    this.errorConectarBacked = false;\n    this.usuarioEliminado = false;\n    if(this.esUsuarioGestionGeneral()){\n      this.columnas = ['Username', 'Permiso', 'Operaciones'];\n    }\n    else{\n      this.columnas = ['Username', 'Permiso'];\n    }\n   }\n\n  // Al inicializar el componente se inicializan las etiquetas del paginador y se muestran los usuarios\n\n  ngOnInit(): void {\n    this.inicializarEtiquetasPaginador();\n    this.mostrarUsuarios();\n  }\n\n  // El siguiente metodo permite inicializar las etiquetas del pagiandor\n\n  inicializarEtiquetasPaginador(){\n    this.paginadorTraductorServ.inicializarPagiandor(this.paginator)\n    this.paginadorTraductorServ.traductor('Primera página', 'Usuarios por página', 'Última página', 'Página siguiente', 'Página anterior');\n  }\n\n/*\nEl siguiente metodo permite obtener los usuarios desde el backend y mostrarlos en una tabla. En caso de error permitira que\nse muestre un mensaje explicando la situacion\n*/\n\n  mostrarUsuarios() {\n    this.MostrarUsuariosServ.mostrarUsuarios().subscribe(\n      (usuarios) => {\n        this.inicializarDataSource(usuarios);\n        this.inicializarPaginador();\n      },\n      () => {\n        this.setErrorConectarBacked();\n      }\n    );\n  }\n\n  setErrorConectarBacked() {\n    this.errorConectarBacked = true;\n  }\n\n  getErrorConectarBacked() {\n    return this.errorConectarBacked;\n  }\n\n  /*\n  El siguiente metodo recibe como argumentos una lista de usuarios e icializa el atributo usuarios a partir\n  de este argumento\n  */\n\n  inicializarDataSource(usuarios) {\n    this.llenarListaEstudiantes(usuarios);\n    this.dataSource = new MatTableDataSource<Usuario>(this.usuarios);\n  }\n\n  // El siguiente metodo permite inicializar el paginador\n\n  inicializarPaginador() {\n    this.dataSource.paginator = this.paginator;\n  }\n\n  /*\n  El siguiente metodo recibe como argumentos una lista de usuarios e icializa el atributo usuarios a partir\n  de este argumento\n  */\n\n  llenarListaEstudiantes(usuarios) {\n    this.usuarios = [];\n    for (const usuario of usuarios) {\n      this.usuarios.push(new Usuario(usuario));\n    }\n  }\n\n  // Este metodo retorna el username del usuario autenticado\n\n  getUsuarioAutenticado(){\n    return this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().getUsername();\n  }\n\n  /*\n  El siguiente metodo recibe como argumento el id de un estudiante. El metodo permite navegar hasta el formulario para\n  editar el estudiante poseedor del id pasado como argumento\n  */\n\n  editarUsuario(idUsuario) {\n    this.router.navigate([`editarUsuario/${idUsuario}`]);\n  }\n\n  /*\n  El siguiente metodo se ejecuta al eliminar un usuario desde el backend. El metodo recibe como argumento el usuario\n  a eliminar. El metodo eliminara el usuario y al hacer esto se mostrara un mensaje mostrando lo sucedido. Tambien\n  se actualizara la tabla de usuarios. En caso de haber un error al eliminar el usuarios, se mostrara un mensaje mos-\n  trando lo sucedido\n  */\n\n eliminarUsuario(usuario){        \n  this.eliminarUsuarioServ.eliminarUsuario(usuario).subscribe(\n    () => {\n      this.usuarioEliminadoMensaje();\n      this.mostrarUsuarios();\n    },\n    () => {\n      this.mostrarMensajeErrorServidor();\n    }\n  ) \n}  \n\n/*\nEl siguiente metodo permite mostrar un mensaje diciendo que se ha eliminado el usuario, el cual desaparecera a los 3\nsegundos\n*/\n\nusuarioEliminadoMensaje() {\n  this.usuarioEliminado = true;\n  setTimeout(\n    () => this.usuarioEliminado = false,\n    3000\n  );\n}\n\n/*\nEl siguiente metodo permite que en la vista se muestre un mensaje de error cuando haya error al conectar con el backend,\neste error ocurre cuando se hace click muy rapido en eliminar usuario\n*/\n\nmostrarMensajeErrorServidor() {\n  this.errorConectarBacked = true;\n  setTimeout(\n    () => this.errorConectarBacked = false,\n    3000\n  );\n}\n\n\n// El siguiente metodo retorna true si el usuario autenticado tiene permiso de Gestion General, de lo contrario retorna false\n\nesUsuarioGestionGeneral(){\n  return this.usuarioAutenticadoOperacionesServ.getUsuarioAutenticado().esGestorGeneral();\n}\n\n}\n","<!--A continuacion se muestra un mensaje cuando haya problemas al conectarse con el servidor-->\n\n<div *ngIf = \"getErrorConectarBacked()\" class = 'container margenSuperior'>\n    <div class = 'row'>\n        <div class = \"col-6 offset-3\">\n            <div class='alert alert-danger' role = 'alert'>\n                <h2 style='text-align: center'class = \"alert-heading\">¡Problema al conectarse con el servidor!</h2>\n            </div>\n        </div>\n    </div>    \n</div>\n\n<!--Mensaje al eliminar un usuario-->\n\n<div *ngIf='usuarioEliminado' class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-6 offset-3\">\n            <div class=\"alert alert-success\" role=\"alert\">            \n                <h2 style='text-align: center' class=\"alert-heading\">¡Usuario eliminado correctamente!</h2>             \n            </div>            \n        </div>\n    </div>\n</div>\n\n\n<!--Tabla que muestra los datos de los usuarios-->\n\n<div class='margenSuperior'>\n    <h1 class=\"mat-display-1 encabezadoTabla\">Usuarios</h1>\n</div>\n\n<div class='container'>\n    <div class=\"row\">\n        <div class=\"col-10 offset-3\">\n            <table mat-table [dataSource]='dataSource'>\n                <ng-container matColumnDef='Username'>\n                    <mat-header-cell *matHeaderCellDef='Username'>Username</mat-header-cell>\n                    <mat-cell *matCellDef='let usuario'>{{usuario.username}}</mat-cell>\n                </ng-container>\n\n                <ng-container matColumnDef='Permiso'>\n                    <mat-header-cell *matHeaderCellDef='Permiso'>Permiso</mat-header-cell>\n                    <mat-cell *matCellDef='let usuario'>{{usuario.permiso.name}}</mat-cell>\n                </ng-container> \n\n<!--Las operaciones se mostraran cuando el usuario autenticado tenga permiso de Gestion General-->\n\n               <ng-container *ngIf='esUsuarioGestionGeneral()' matColumnDef=\"Operaciones\">\n                    <mat-header-cell *matHeaderCellDef>Operaciones</mat-header-cell>\n                    <mat-cell *matCellDef=\"let usuario\">\n                        <div class=\"container\">\n                            <div class=\"row\">\n                                <div class=\"col-3 px-0\">\n                                    <mat-icon class=\"mat-icon-button\" color='primary' (click)=\"editarUsuario(usuario.pk)\">\n                                        {{'edit'}}\n                                    </mat-icon>\n                                </div>  \n\n<!--El boton de eliminar no se mostrara cuando el usuario mostrado sea el mismo que el usuaroi autenitcado-->\n\n                                <div *ngIf='usuario.username != getUsuarioAutenticado()' class=\"col-3 px-0\">\n                                    <mat-icon class=\"mat-icon-button eliminar\" color='warn' (click)=\"eliminarUsuario(usuario)\">\n                                        {{'delete'}}\n                                    </mat-icon>\n                                </div>                                \n                            </div>\n                        </div>                            \n                    </mat-cell>\n                </ng-container>\n                             \n\n                <mat-header-row *matHeaderRowDef=\"columnas\"></mat-header-row>\n                <mat-row *matRowDef=\"let row; columns: columnas;\"></mat-row>\n            </table>           \n        </div>        \n    </div>\n\n    <!--Paginador-->\n\n    <div class=\"row\">\n        <div class=\"col-8\">\n            <mat-paginator [pageSizeOptions]=\"pageSizeOptions\" showFirstLastButtons></mat-paginator>\n        </div>           \n    </div>\n</div>    \n","// Modulos\n\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatPaginatorModule, MatPaginatorIntl } from '@angular/material/paginator';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { CustomMatPaginatorUsuariosIntl } from '../../Modelos/PaginatorUsuarioEspanish';\nimport { RouterModule, Routes} from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// Componentes\n\nimport { MostrarUsuariosComponent } from './mostrar-usuarios.component';\n\nexport const routes: Routes = [\n  {path: 'mostrarUsuarios', component: MostrarUsuariosComponent},\n];\n\n@NgModule({\n  declarations: [\n    MostrarUsuariosComponent\n  ],\n  exports: [\n    MostrarUsuariosComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatPaginatorModule,\n    MatTableModule,\n    MatIconModule,\n    MatButtonModule,\n    RouterModule,\n    /* FormsModule,\n    ReactiveFormsModule, */\n  ], \n})\nexport class MostrarUsuariosModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}